
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  0000105c  000010f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800130  00800130  000011c0  2**0
                  ALLOC
  3 .debug_aranges 00000238  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000607  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6b  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  0000266a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001052  00000000  00000000  00002b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a0  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 00007f6d  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  0000c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_1>
       8:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_13>
      38:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_14>
      3c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
      8a:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Recive>:
uint16 DecimalNum;
volatile uint16 DecimalNums[DecimalNums_SIZE];
volatile uint8  DecimalNums_index = 0;

void Recive(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62

	uint8 received_char = USART_Receive();
      9c:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_Receive>
      a0:	89 83       	std	Y+1, r24	; 0x01

	if(Access==0)
      a2:	80 91 98 00 	lds	r24, 0x0098
      a6:	88 23       	and	r24, r24
      a8:	09 f0       	breq	.+2      	; 0xac <Recive+0x1a>
      aa:	5a c0       	rjmp	.+180    	; 0x160 <Recive+0xce>
	{
		if (received_char == ',') {
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	8c 32       	cpi	r24, 0x2C	; 44
      b0:	91 f4       	brne	.+36     	; 0xd6 <Recive+0x44>
			// Switch to receiving password
			receiving_password = 1;
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	80 93 32 01 	sts	0x0132, r24
			name[name_index] = '\0'; // Null-terminate the name string
      b8:	80 91 30 01 	lds	r24, 0x0130
      bc:	88 2f       	mov	r24, r24
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	fc 01       	movw	r30, r24
      c2:	eb 5a       	subi	r30, 0xAB	; 171
      c4:	fe 4f       	sbci	r31, 0xFE	; 254
      c6:	10 82       	st	Z, r1
			name_check = name_index;
      c8:	80 91 30 01 	lds	r24, 0x0130
      cc:	80 93 4c 01 	sts	0x014C, r24
			name_index = 0;
      d0:	10 92 30 01 	sts	0x0130, r1
      d4:	45 c0       	rjmp	.+138    	; 0x160 <Recive+0xce>
		} else if (received_char == '\n') {
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	8a 30       	cpi	r24, 0x0A	; 10
      da:	b9 f4       	brne	.+46     	; 0x10a <Recive+0x78>
			// End of transmission, process the received data
			password[password_index] = '\0'; // Null-terminate the password string
      dc:	80 91 31 01 	lds	r24, 0x0131
      e0:	88 2f       	mov	r24, r24
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	eb 5c       	subi	r30, 0xCB	; 203
      e8:	fe 4f       	sbci	r31, 0xFE	; 254
      ea:	10 82       	st	Z, r1
			password_check = password_index;
      ec:	80 91 31 01 	lds	r24, 0x0131
      f0:	80 93 4d 01 	sts	0x014D, r24
			password_index = 0;
      f4:	10 92 31 01 	sts	0x0131, r1
			receiving_password = 0;
      f8:	10 92 32 01 	sts	0x0132, r1
			Access=10;   //Any value
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	80 93 98 00 	sts	0x0098, r24
			Check=1;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	80 93 34 01 	sts	0x0134, r24
     108:	2b c0       	rjmp	.+86     	; 0x160 <Recive+0xce>

		} else {
			// Store the received character in the appropriate buffer
			if (receiving_password && password_index < BUFFER_SIZE - 1) {
     10a:	80 91 32 01 	lds	r24, 0x0132
     10e:	88 23       	and	r24, r24
     110:	91 f0       	breq	.+36     	; 0x136 <Recive+0xa4>
     112:	80 91 31 01 	lds	r24, 0x0131
     116:	89 30       	cpi	r24, 0x09	; 9
     118:	70 f4       	brcc	.+28     	; 0x136 <Recive+0xa4>
				password[password_index++] = received_char;
     11a:	20 91 31 01 	lds	r18, 0x0131
     11e:	82 2f       	mov	r24, r18
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	eb 5c       	subi	r30, 0xCB	; 203
     126:	fe 4f       	sbci	r31, 0xFE	; 254
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	80 83       	st	Z, r24
     12c:	82 2f       	mov	r24, r18
     12e:	8f 5f       	subi	r24, 0xFF	; 255
     130:	80 93 31 01 	sts	0x0131, r24
     134:	15 c0       	rjmp	.+42     	; 0x160 <Recive+0xce>
			} else if (!receiving_password && name_index < BUFFER_SIZE - 1) {
     136:	80 91 32 01 	lds	r24, 0x0132
     13a:	88 23       	and	r24, r24
     13c:	89 f4       	brne	.+34     	; 0x160 <Recive+0xce>
     13e:	80 91 30 01 	lds	r24, 0x0130
     142:	89 30       	cpi	r24, 0x09	; 9
     144:	68 f4       	brcc	.+26     	; 0x160 <Recive+0xce>
				name[name_index++] = received_char;
     146:	20 91 30 01 	lds	r18, 0x0130
     14a:	82 2f       	mov	r24, r18
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	fc 01       	movw	r30, r24
     150:	eb 5a       	subi	r30, 0xAB	; 171
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	80 83       	st	Z, r24
     158:	82 2f       	mov	r24, r18
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 30 01 	sts	0x0130, r24
			}
		}
	}

	if(Access==1)
     160:	80 91 98 00 	lds	r24, 0x0098
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	99 f5       	brne	.+102    	; 0x1ce <Recive+0x13c>
	{
		DecimalNum = charToDecimal(received_char);         //convert char to decimal
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 31 06 	call	0xc62	; 0xc62 <charToDecimal>
     172:	90 93 50 01 	sts	0x0150, r25
     176:	80 93 4f 01 	sts	0x014F, r24
		DecimalNums[DecimalNums_index++] = DecimalNum;     //Put the decimal into an array
     17a:	40 91 33 01 	lds	r20, 0x0133
     17e:	84 2f       	mov	r24, r20
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	20 91 4f 01 	lds	r18, 0x014F
     186:	30 91 50 01 	lds	r19, 0x0150
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	fc 01       	movw	r30, r24
     190:	ef 5a       	subi	r30, 0xAF	; 175
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	31 83       	std	Z+1, r19	; 0x01
     196:	20 83       	st	Z, r18
     198:	84 2f       	mov	r24, r20
     19a:	8f 5f       	subi	r24, 0xFF	; 255
     19c:	80 93 33 01 	sts	0x0133, r24

		if(DecimalNums_index == 2)
     1a0:	80 91 33 01 	lds	r24, 0x0133
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	99 f4       	brne	.+38     	; 0x1ce <Recive+0x13c>
		{
			DIO_enuSetPinValue((DecimalNums[0]) , (DecimalNums[1]));   //The first number represents the pin number and the second number represents its status
     1a8:	80 91 51 01 	lds	r24, 0x0151
     1ac:	90 91 52 01 	lds	r25, 0x0152
     1b0:	28 2f       	mov	r18, r24
     1b2:	80 91 53 01 	lds	r24, 0x0153
     1b6:	90 91 54 01 	lds	r25, 0x0154
     1ba:	98 2f       	mov	r25, r24
     1bc:	82 2f       	mov	r24, r18
     1be:	69 2f       	mov	r22, r25
     1c0:	0e 94 00 03 	call	0x600	; 0x600 <DIO_enuSetPinValue>
			DecimalNums_index = 0;                                     //Return everything to its original state
     1c4:	10 92 33 01 	sts	0x0133, r1
			Access=10;                                                 //Any value except 0,1
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	80 93 98 00 	sts	0x0098, r24
		}
	}

	if(received_char == '*')  //before the name in app
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	8a 32       	cpi	r24, 0x2A	; 42
     1d2:	19 f4       	brne	.+6      	; 0x1da <Recive+0x148>
	{
		Access=0;
     1d4:	10 92 98 00 	sts	0x0098, r1
     1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <Recive+0x154>
	}
	else if (received_char == '#')  //before any control buttons in app
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	83 32       	cpi	r24, 0x23	; 35
     1de:	19 f4       	brne	.+6      	; 0x1e6 <Recive+0x154>
	{
		Access=1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 98 00 	sts	0x0098, r24
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <main>:

int main(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <main+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0x8>
     1f6:	0f 92       	push	r0
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
     1fc:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_vidInit>
	EXT0_vidInit();
     200:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <EXT0_vidInit>
	USART_vidInit();
     204:	0e 94 44 06 	call	0xc88	; 0xc88 <USART_vidInit>

	USART_vidSetCallBack_Rx(Recive);
     208:	89 e4       	ldi	r24, 0x49	; 73
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <USART_vidSetCallBack_Rx>
	USART_vidEnable_RX_Int();
     210:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <USART_vidEnable_RX_Int>
	EXT0_vidSetCallBack(BUZZER_OFF);
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	0e 94 3e 05 	call	0xa7c	; 0xa7c <EXT0_vidSetCallBack>
	EXT0_vidEnable();
     21c:	0e 94 07 05 	call	0xa0e	; 0xa0e <EXT0_vidEnable>
	GIE_VIDEnable();
     220:	0e 94 15 06 	call	0xc2a	; 0xc2a <GIE_VIDEnable>

	DIO_enuSetPinPullUp(BUTTON , 1);
     224:	8a e1       	ldi	r24, 0x1A	; 26
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <DIO_enuSetPinPullUp>

	while(1)
	{

		if(Check==1)
     22c:	80 91 34 01 	lds	r24, 0x0134
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	09 f0       	breq	.+2      	; 0x236 <main+0x48>
     234:	cd c0       	rjmp	.+410    	; 0x3d0 <main+0x1e2>
		{
			if(password_check == 4)
     236:	80 91 4d 01 	lds	r24, 0x014D
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	09 f0       	breq	.+2      	; 0x240 <main+0x52>
     23e:	bf c0       	rjmp	.+382    	; 0x3be <main+0x1d0>
			{
				index=0;
     240:	10 92 4e 01 	sts	0x014E, r1
				for (uint8 u8CntrName_OUTER = 0; u8CntrName_OUTER < BUFFER_SIZE; u8CntrName_OUTER++ )   //BUFFER_SIZE=10
     244:	1c 82       	std	Y+4, r1	; 0x04
     246:	48 c0       	rjmp	.+144    	; 0x2d8 <main+0xea>
				{
					for (uint8 u8CntrName_INNER = 0; u8CntrName_INNER < name_check; u8CntrName_INNER++ )
     248:	1b 82       	std	Y+3, r1	; 0x03
     24a:	29 c0       	rjmp	.+82     	; 0x29e <main+0xb0>
					{
						if ( name[u8CntrName_INNER] ==  Users[u8CntrName_OUTER].Name[u8CntrName_INNER] )
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	eb 5a       	subi	r30, 0xAB	; 171
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	60 81       	ld	r22, Z
     25a:	8c 81       	ldd	r24, Y+4	; 0x04
     25c:	28 2f       	mov	r18, r24
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	48 2f       	mov	r20, r24
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	c9 01       	movw	r24, r18
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	82 0f       	add	r24, r18
     26e:	93 1f       	adc	r25, r19
     270:	9c 01       	movw	r18, r24
     272:	22 0f       	add	r18, r18
     274:	33 1f       	adc	r19, r19
     276:	22 0f       	add	r18, r18
     278:	33 1f       	adc	r19, r19
     27a:	82 0f       	add	r24, r18
     27c:	93 1f       	adc	r25, r19
     27e:	84 0f       	add	r24, r20
     280:	95 1f       	adc	r25, r21
     282:	fc 01       	movw	r30, r24
     284:	e7 56       	subi	r30, 0x67	; 103
     286:	ff 4f       	sbci	r31, 0xFF	; 255
     288:	80 81       	ld	r24, Z
     28a:	68 17       	cp	r22, r24
     28c:	69 f4       	brne	.+26     	; 0x2a8 <main+0xba>
						{
							index_check_name ++;
     28e:	80 91 3f 01 	lds	r24, 0x013F
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 93 3f 01 	sts	0x013F, r24
			if(password_check == 4)
			{
				index=0;
				for (uint8 u8CntrName_OUTER = 0; u8CntrName_OUTER < BUFFER_SIZE; u8CntrName_OUTER++ )   //BUFFER_SIZE=10
				{
					for (uint8 u8CntrName_INNER = 0; u8CntrName_INNER < name_check; u8CntrName_INNER++ )
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	8b 83       	std	Y+3, r24	; 0x03
     29e:	90 91 4c 01 	lds	r25, 0x014C
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	89 17       	cp	r24, r25
     2a6:	90 f2       	brcs	.-92     	; 0x24c <main+0x5e>
						{
							break;
						}
					}
					//All users with the same name
					if(index_check_name == name_check)
     2a8:	90 91 3f 01 	lds	r25, 0x013F
     2ac:	80 91 4c 01 	lds	r24, 0x014C
     2b0:	98 17       	cp	r25, r24
     2b2:	69 f4       	brne	.+26     	; 0x2ce <main+0xe0>
					{
						correct_names_check[index++]=u8CntrName_OUTER;
     2b4:	20 91 4e 01 	lds	r18, 0x014E
     2b8:	82 2f       	mov	r24, r18
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	e0 5c       	subi	r30, 0xC0	; 192
     2c0:	fe 4f       	sbci	r31, 0xFE	; 254
     2c2:	8c 81       	ldd	r24, Y+4	; 0x04
     2c4:	80 83       	st	Z, r24
     2c6:	82 2f       	mov	r24, r18
     2c8:	8f 5f       	subi	r24, 0xFF	; 255
     2ca:	80 93 4e 01 	sts	0x014E, r24
					}
					index_check_name=0;
     2ce:	10 92 3f 01 	sts	0x013F, r1
		if(Check==1)
		{
			if(password_check == 4)
			{
				index=0;
				for (uint8 u8CntrName_OUTER = 0; u8CntrName_OUTER < BUFFER_SIZE; u8CntrName_OUTER++ )   //BUFFER_SIZE=10
     2d2:	8c 81       	ldd	r24, Y+4	; 0x04
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	8c 83       	std	Y+4, r24	; 0x04
     2d8:	8c 81       	ldd	r24, Y+4	; 0x04
     2da:	8a 30       	cpi	r24, 0x0A	; 10
     2dc:	08 f4       	brcc	.+2      	; 0x2e0 <main+0xf2>
     2de:	b4 cf       	rjmp	.-152    	; 0x248 <main+0x5a>
					index_check_name=0;
				}

				/*******************************************************************************************************/
				//compare entered password with the actual password//
				uint8 index_1 = index;
     2e0:	80 91 4e 01 	lds	r24, 0x014E
     2e4:	8d 83       	std	Y+5, r24	; 0x05
				for (uint8 u8CntrPass_OUTER = 0; u8CntrPass_OUTER < index; u8CntrPass_OUTER++ )
     2e6:	1a 82       	std	Y+2, r1	; 0x02
     2e8:	44 c0       	rjmp	.+136    	; 0x372 <main+0x184>
				{
					index_1--;
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	81 50       	subi	r24, 0x01	; 1
     2ee:	8d 83       	std	Y+5, r24	; 0x05
					for (uint8 u8CntrPass_INNER = 0; u8CntrPass_INNER < password_check; u8CntrPass_INNER++ )
     2f0:	19 82       	std	Y+1, r1	; 0x01
     2f2:	2f c0       	rjmp	.+94     	; 0x352 <main+0x164>
					{
						if ( password[u8CntrPass_INNER] == Users[correct_names_check[index_1]].Password[u8CntrPass_INNER] )
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	fc 01       	movw	r30, r24
     2fc:	eb 5c       	subi	r30, 0xCB	; 203
     2fe:	fe 4f       	sbci	r31, 0xFE	; 254
     300:	60 81       	ld	r22, Z
     302:	8d 81       	ldd	r24, Y+5	; 0x05
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	fc 01       	movw	r30, r24
     30a:	e0 5c       	subi	r30, 0xC0	; 192
     30c:	fe 4f       	sbci	r31, 0xFE	; 254
     30e:	80 81       	ld	r24, Z
     310:	28 2f       	mov	r18, r24
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	48 2f       	mov	r20, r24
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	c9 01       	movw	r24, r18
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	82 0f       	add	r24, r18
     322:	93 1f       	adc	r25, r19
     324:	9c 01       	movw	r18, r24
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	84 0f       	add	r24, r20
     334:	95 1f       	adc	r25, r21
     336:	fc 01       	movw	r30, r24
     338:	ed 55       	subi	r30, 0x5D	; 93
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	80 81       	ld	r24, Z
     33e:	68 17       	cp	r22, r24
     340:	69 f4       	brne	.+26     	; 0x35c <main+0x16e>
						{
							index_check_pass ++;
     342:	80 91 4b 01 	lds	r24, 0x014B
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	80 93 4b 01 	sts	0x014B, r24
				//compare entered password with the actual password//
				uint8 index_1 = index;
				for (uint8 u8CntrPass_OUTER = 0; u8CntrPass_OUTER < index; u8CntrPass_OUTER++ )
				{
					index_1--;
					for (uint8 u8CntrPass_INNER = 0; u8CntrPass_INNER < password_check; u8CntrPass_INNER++ )
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	90 91 4d 01 	lds	r25, 0x014D
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	89 17       	cp	r24, r25
     35a:	60 f2       	brcs	.-104    	; 0x2f4 <main+0x106>
						{
							break;
						}
					}

					if(index_check_pass == password_check)
     35c:	90 91 4b 01 	lds	r25, 0x014B
     360:	80 91 4d 01 	lds	r24, 0x014D
     364:	98 17       	cp	r25, r24
     366:	59 f0       	breq	.+22     	; 0x37e <main+0x190>
					{
						break;
					}

					index_check_pass=0;
     368:	10 92 4b 01 	sts	0x014B, r1
				}

				/*******************************************************************************************************/
				//compare entered password with the actual password//
				uint8 index_1 = index;
				for (uint8 u8CntrPass_OUTER = 0; u8CntrPass_OUTER < index; u8CntrPass_OUTER++ )
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	8a 83       	std	Y+2, r24	; 0x02
     372:	90 91 4e 01 	lds	r25, 0x014E
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	89 17       	cp	r24, r25
     37a:	08 f4       	brcc	.+2      	; 0x37e <main+0x190>
     37c:	b6 cf       	rjmp	.-148    	; 0x2ea <main+0xfc>
					}

					index_check_pass=0;
				}

				if(index == 0)
     37e:	80 91 4e 01 	lds	r24, 0x014E
     382:	88 23       	and	r24, r24
     384:	51 f4       	brne	.+20     	; 0x39a <main+0x1ac>
				{
					Buzzer_warning++;
     386:	80 91 4a 01 	lds	r24, 0x014A
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	80 93 4a 01 	sts	0x014A, r24
					//USART_Transmit('2');  //meaning wrong name
					USART_TransmitString((uint8*)"Wrong Name");
     390:	80 e6       	ldi	r24, 0x60	; 96
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 7a 07 	call	0xef4	; 0xef4 <USART_TransmitString>
     398:	1b c0       	rjmp	.+54     	; 0x3d0 <main+0x1e2>
				}
				else if (index_check_pass == password_check)
     39a:	90 91 4b 01 	lds	r25, 0x014B
     39e:	80 91 4d 01 	lds	r24, 0x014D
     3a2:	98 17       	cp	r25, r24
     3a4:	39 f4       	brne	.+14     	; 0x3b4 <main+0x1c6>
				{
					Buzzer_warning=0;
     3a6:	10 92 4a 01 	sts	0x014A, r1
					//USART_Transmit('3');  //meaning welcome
					USART_TransmitString((uint8*)"Welcome Home");
     3aa:	8b e6       	ldi	r24, 0x6B	; 107
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 7a 07 	call	0xef4	; 0xef4 <USART_TransmitString>
     3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <main+0x1e2>
				}
				else
				{
					//USART_Transmit('4');  //some thing wrong
					USART_TransmitString((uint8*)"Some thing Wrong");
     3b4:	88 e7       	ldi	r24, 0x78	; 120
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 7a 07 	call	0xef4	; 0xef4 <USART_TransmitString>
     3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <main+0x1e2>
				}
			}
			else
			{
				Buzzer_warning++;
     3be:	80 91 4a 01 	lds	r24, 0x014A
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 4a 01 	sts	0x014A, r24
				//USART_Transmit('1');  //meaning wrong pass
				USART_TransmitString((uint8*)"Wrong Password");
     3c8:	89 e8       	ldi	r24, 0x89	; 137
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 7a 07 	call	0xef4	; 0xef4 <USART_TransmitString>
			}
		}

		if(Buzzer_warning == 3)
     3d0:	80 91 4a 01 	lds	r24, 0x014A
     3d4:	83 30       	cpi	r24, 0x03	; 3
     3d6:	21 f4       	brne	.+8      	; 0x3e0 <main+0x1f2>
		{
			Buzzer_warning = 0;
     3d8:	10 92 4a 01 	sts	0x014A, r1
			BUZZER_ON();
     3dc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <BUZZER_ON>
		}

		Check=0;
     3e0:	10 92 34 01 	sts	0x0134, r1
		index_check_pass=0;
     3e4:	10 92 4b 01 	sts	0x014B, r1
     3e8:	21 cf       	rjmp	.-446    	; 0x22c <main+0x3e>

000003ea <BUZZER_ON>:
#include "BUZZER.h"

		/*------------------------- Function Definitions -----------------------------*/

void BUZZER_ON()
{
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(buzzer,1);
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	0e 94 00 03 	call	0x600	; 0x600 <DIO_enuSetPinValue>
}
     3fe:	cf 91       	pop	r28
     400:	df 91       	pop	r29
     402:	08 95       	ret

00000404 <BUZZER_OFF>:

void BUZZER_OFF()
{
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(buzzer,0);
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	0e 94 00 03 	call	0x600	; 0x600 <DIO_enuSetPinValue>
}
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <DIO_vidInit>:
#include "DIO.h"
#include "DIO_cfg.h"
#include "DIO_priv.h"

void DIO_vidInit(void)
{
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
	DDRA = CONC(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
     426:	ea e3       	ldi	r30, 0x3A	; 58
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 83       	st	Z, r24
	DDRB = CONC(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
     42e:	e7 e3       	ldi	r30, 0x37	; 55
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	80 83       	st	Z, r24
	DDRC = CONC(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16 );
     436:	e4 e3       	ldi	r30, 0x34	; 52
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 ef       	ldi	r24, 0xF0	; 240
     43c:	80 83       	st	Z, r24
	DDRD = CONC(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24 );
     43e:	e1 e3       	ldi	r30, 0x31	; 49
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	82 eb       	ldi	r24, 0xB2	; 178
     444:	80 83       	st	Z, r24


}
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <DIO_enuSetPinDir>:

tenuErrorStatus DIO_enuSetPinDir   (uint8 u8PinNumCpy ,uint8  u8PinDirCpy)
{
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	00 d0       	rcall	.+0      	; 0x452 <DIO_enuSetPinDir+0x6>
     452:	0f 92       	push	r0
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	8a 83       	std	Y+2, r24	; 0x02
     45a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc;
	if(u8PinNumCpy > 31 || u8PinDirCpy > 1)
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	80 32       	cpi	r24, 0x20	; 32
     460:	18 f4       	brcc	.+6      	; 0x468 <DIO_enuSetPinDir+0x1c>
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	18 f0       	brcs	.+6      	; 0x46e <DIO_enuSetPinDir+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	c2 c0       	rjmp	.+388    	; 0x5f2 <DIO_enuSetPinDir+0x1a6>
	}
	else
	{
		if(u8PinNumCpy <=7)
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	88 30       	cpi	r24, 0x08	; 8
     472:	60 f5       	brcc	.+88     	; 0x4cc <DIO_enuSetPinDir+0x80>
		{
			/*DDRA*/
			if (u8PinDirCpy == 0)
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	88 23       	and	r24, r24
     478:	a9 f4       	brne	.+42     	; 0x4a4 <DIO_enuSetPinDir+0x58>
			{
				// clear pin 
				CLR_BIT(DDRA,u8PinNumCpy);
     47a:	aa e3       	ldi	r26, 0x3A	; 58
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	ea e3       	ldi	r30, 0x3A	; 58
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	48 2f       	mov	r20, r24
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 2e       	mov	r0, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_enuSetPinDir+0x4c>
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_enuSetPinDir+0x48>
     49c:	80 95       	com	r24
     49e:	84 23       	and	r24, r20
     4a0:	8c 93       	st	X, r24
     4a2:	a6 c0       	rjmp	.+332    	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRA,u8PinNumCpy);
     4a4:	aa e3       	ldi	r26, 0x3A	; 58
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	ea e3       	ldi	r30, 0x3A	; 58
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	48 2f       	mov	r20, r24
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_enuSetPinDir+0x76>
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_enuSetPinDir+0x72>
     4c6:	84 2b       	or	r24, r20
     4c8:	8c 93       	st	X, r24
     4ca:	92 c0       	rjmp	.+292    	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=15)
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	80 31       	cpi	r24, 0x10	; 16
     4d0:	78 f5       	brcc	.+94     	; 0x530 <DIO_enuSetPinDir+0xe4>
		{
			/*DDRB*/
			u8PinNumCpy =u8PinNumCpy%8;
     4d2:	8a 81       	ldd	r24, Y+2	; 0x02
     4d4:	87 70       	andi	r24, 0x07	; 7
     4d6:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
     4d8:	8b 81       	ldd	r24, Y+3	; 0x03
     4da:	88 23       	and	r24, r24
     4dc:	a9 f4       	brne	.+42     	; 0x508 <DIO_enuSetPinDir+0xbc>
			{
				// clear pin 
				CLR_BIT(DDRB,u8PinNumCpy);
     4de:	a7 e3       	ldi	r26, 0x37	; 55
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e7 e3       	ldi	r30, 0x37	; 55
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	48 2f       	mov	r20, r24
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 2e       	mov	r0, r18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_enuSetPinDir+0xb0>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	0a 94       	dec	r0
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_enuSetPinDir+0xac>
     500:	80 95       	com	r24
     502:	84 23       	and	r24, r20
     504:	8c 93       	st	X, r24
     506:	74 c0       	rjmp	.+232    	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRB,u8PinNumCpy);
     508:	a7 e3       	ldi	r26, 0x37	; 55
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e7 e3       	ldi	r30, 0x37	; 55
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	48 2f       	mov	r20, r24
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	28 2f       	mov	r18, r24
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	02 2e       	mov	r0, r18
     520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_enuSetPinDir+0xda>
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_enuSetPinDir+0xd6>
     52a:	84 2b       	or	r24, r20
     52c:	8c 93       	st	X, r24
     52e:	60 c0       	rjmp	.+192    	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=23)
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	88 31       	cpi	r24, 0x18	; 24
     534:	78 f5       	brcc	.+94     	; 0x594 <DIO_enuSetPinDir+0x148>
		{
			/*DDRC*/
			u8PinNumCpy =u8PinNumCpy%8;
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	87 70       	andi	r24, 0x07	; 7
     53a:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	88 23       	and	r24, r24
     540:	a9 f4       	brne	.+42     	; 0x56c <DIO_enuSetPinDir+0x120>
			{
				// clear pin 
				CLR_BIT(DDRC,u8PinNumCpy);
     542:	a4 e3       	ldi	r26, 0x34	; 52
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e4 e3       	ldi	r30, 0x34	; 52
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	48 2f       	mov	r20, r24
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	28 2f       	mov	r18, r24
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	02 2e       	mov	r0, r18
     55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_enuSetPinDir+0x114>
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	0a 94       	dec	r0
     562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_enuSetPinDir+0x110>
     564:	80 95       	com	r24
     566:	84 23       	and	r24, r20
     568:	8c 93       	st	X, r24
     56a:	42 c0       	rjmp	.+132    	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRC,u8PinNumCpy);
     56c:	a4 e3       	ldi	r26, 0x34	; 52
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	e4 e3       	ldi	r30, 0x34	; 52
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	48 2f       	mov	r20, r24
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	28 2f       	mov	r18, r24
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	02 2e       	mov	r0, r18
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_enuSetPinDir+0x13e>
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	0a 94       	dec	r0
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_enuSetPinDir+0x13a>
     58e:	84 2b       	or	r24, r20
     590:	8c 93       	st	X, r24
     592:	2e c0       	rjmp	.+92     	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else
		{
			/*DDRD*/
			u8PinNumCpy =u8PinNumCpy%8;
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	87 70       	andi	r24, 0x07	; 7
     598:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	88 23       	and	r24, r24
     59e:	a9 f4       	brne	.+42     	; 0x5ca <DIO_enuSetPinDir+0x17e>
			{
				// clear pin 
				CLR_BIT(DDRD,u8PinNumCpy);
     5a0:	a1 e3       	ldi	r26, 0x31	; 49
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	e1 e3       	ldi	r30, 0x31	; 49
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	48 2f       	mov	r20, r24
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 2e       	mov	r0, r18
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_enuSetPinDir+0x172>
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	0a 94       	dec	r0
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_enuSetPinDir+0x16e>
     5c2:	80 95       	com	r24
     5c4:	84 23       	and	r24, r20
     5c6:	8c 93       	st	X, r24
     5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRD,u8PinNumCpy);
     5ca:	a1 e3       	ldi	r26, 0x31	; 49
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e1 e3       	ldi	r30, 0x31	; 49
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	48 2f       	mov	r20, r24
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	28 2f       	mov	r18, r24
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 2e       	mov	r0, r18
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_enuSetPinDir+0x19c>
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	0a 94       	dec	r0
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_enuSetPinDir+0x198>
     5ec:	84 2b       	or	r24, r20
     5ee:	8c 93       	st	X, r24
			}
		}
		enuErrorStatusLoc = E_OK ;
     5f0:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuErrorStatusLoc;
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <DIO_enuSetPinValue>:

tenuErrorStatus DIO_enuSetPinValue (uint8 u8PinNumCpy ,uint8  u8PinStatusCpy)
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	00 d0       	rcall	.+0      	; 0x606 <DIO_enuSetPinValue+0x6>
     606:	0f 92       	push	r0
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	8a 83       	std	Y+2, r24	; 0x02
     60e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 || u8PinStatusCpy > 1)
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	80 32       	cpi	r24, 0x20	; 32
     614:	18 f4       	brcc	.+6      	; 0x61c <DIO_enuSetPinValue+0x1c>
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	18 f0       	brcs	.+6      	; 0x622 <DIO_enuSetPinValue+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	89 83       	std	Y+1, r24	; 0x01
     620:	cb c0       	rjmp	.+406    	; 0x7b8 <DIO_enuSetPinValue+0x1b8>
	}
	else
	{
		if(u8PinNumCpy <= 7)
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	88 30       	cpi	r24, 0x08	; 8
     626:	60 f5       	brcc	.+88     	; 0x680 <DIO_enuSetPinValue+0x80>
		{
			/*ODRA*/
			if (u8PinStatusCpy == 0)
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	88 23       	and	r24, r24
     62c:	a9 f4       	brne	.+42     	; 0x658 <DIO_enuSetPinValue+0x58>
			{
				//CLR BIT
				CLR_BIT(ODRA , u8PinNumCpy);
     62e:	ab e3       	ldi	r26, 0x3B	; 59
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	eb e3       	ldi	r30, 0x3B	; 59
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	48 2f       	mov	r20, r24
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	02 2e       	mov	r0, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_enuSetPinValue+0x4c>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_enuSetPinValue+0x48>
     650:	80 95       	com	r24
     652:	84 23       	and	r24, r20
     654:	8c 93       	st	X, r24
     656:	af c0       	rjmp	.+350    	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRA , u8PinNumCpy);
     658:	ab e3       	ldi	r26, 0x3B	; 59
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	eb e3       	ldi	r30, 0x3B	; 59
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	48 2f       	mov	r20, r24
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	28 2f       	mov	r18, r24
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	02 2e       	mov	r0, r18
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_enuSetPinValue+0x76>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	0a 94       	dec	r0
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_enuSetPinValue+0x72>
     67a:	84 2b       	or	r24, r20
     67c:	8c 93       	st	X, r24
     67e:	9b c0       	rjmp	.+310    	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else if(u8PinNumCpy <= 15)
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	80 31       	cpi	r24, 0x10	; 16
     684:	90 f5       	brcc	.+100    	; 0x6ea <DIO_enuSetPinValue+0xea>
		{
			/*ODRB*/
			if (u8PinStatusCpy == 0)
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	88 23       	and	r24, r24
     68a:	c1 f4       	brne	.+48     	; 0x6bc <DIO_enuSetPinValue+0xbc>
			{
				//CLR BIT
				CLR_BIT(ODRB , (u8PinNumCpy%8));
     68c:	a8 e3       	ldi	r26, 0x38	; 56
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e8 e3       	ldi	r30, 0x38	; 56
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	48 2f       	mov	r20, r24
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9c 01       	movw	r18, r24
     6a0:	27 70       	andi	r18, 0x07	; 7
     6a2:	30 70       	andi	r19, 0x00	; 0
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	02 2e       	mov	r0, r18
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_enuSetPinValue+0xb0>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	0a 94       	dec	r0
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_enuSetPinValue+0xac>
     6b4:	80 95       	com	r24
     6b6:	84 23       	and	r24, r20
     6b8:	8c 93       	st	X, r24
     6ba:	7d c0       	rjmp	.+250    	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRB , (u8PinNumCpy%8));
     6bc:	a8 e3       	ldi	r26, 0x38	; 56
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	e8 e3       	ldi	r30, 0x38	; 56
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	48 2f       	mov	r20, r24
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9c 01       	movw	r18, r24
     6d0:	27 70       	andi	r18, 0x07	; 7
     6d2:	30 70       	andi	r19, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 2e       	mov	r0, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_enuSetPinValue+0xe0>
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_enuSetPinValue+0xdc>
     6e4:	84 2b       	or	r24, r20
     6e6:	8c 93       	st	X, r24
     6e8:	66 c0       	rjmp	.+204    	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else if(u8PinNumCpy <= 23)
     6ea:	8a 81       	ldd	r24, Y+2	; 0x02
     6ec:	88 31       	cpi	r24, 0x18	; 24
     6ee:	90 f5       	brcc	.+100    	; 0x754 <DIO_enuSetPinValue+0x154>
		{
			/*ODRC*/
			if (u8PinStatusCpy == 0)
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	88 23       	and	r24, r24
     6f4:	c1 f4       	brne	.+48     	; 0x726 <DIO_enuSetPinValue+0x126>
			{
				//CLR BIT
				CLR_BIT(ODRC , (u8PinNumCpy%8));
     6f6:	a5 e3       	ldi	r26, 0x35	; 53
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e5 e3       	ldi	r30, 0x35	; 53
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	48 2f       	mov	r20, r24
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9c 01       	movw	r18, r24
     70a:	27 70       	andi	r18, 0x07	; 7
     70c:	30 70       	andi	r19, 0x00	; 0
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	02 2e       	mov	r0, r18
     714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_enuSetPinValue+0x11a>
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_enuSetPinValue+0x116>
     71e:	80 95       	com	r24
     720:	84 23       	and	r24, r20
     722:	8c 93       	st	X, r24
     724:	48 c0       	rjmp	.+144    	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRC , (u8PinNumCpy%8));
     726:	a5 e3       	ldi	r26, 0x35	; 53
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e5 e3       	ldi	r30, 0x35	; 53
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	48 2f       	mov	r20, r24
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9c 01       	movw	r18, r24
     73a:	27 70       	andi	r18, 0x07	; 7
     73c:	30 70       	andi	r19, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	02 2e       	mov	r0, r18
     744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_enuSetPinValue+0x14a>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	0a 94       	dec	r0
     74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_enuSetPinValue+0x146>
     74e:	84 2b       	or	r24, r20
     750:	8c 93       	st	X, r24
     752:	31 c0       	rjmp	.+98     	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else
		{
			/*ODRD*/
			if (u8PinStatusCpy == 0)
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	88 23       	and	r24, r24
     758:	c1 f4       	brne	.+48     	; 0x78a <DIO_enuSetPinValue+0x18a>
			{
				//CLR BIT
				CLR_BIT(ODRD , (u8PinNumCpy%8));
     75a:	a2 e3       	ldi	r26, 0x32	; 50
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e2 e3       	ldi	r30, 0x32	; 50
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	48 2f       	mov	r20, r24
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9c 01       	movw	r18, r24
     76e:	27 70       	andi	r18, 0x07	; 7
     770:	30 70       	andi	r19, 0x00	; 0
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	02 2e       	mov	r0, r18
     778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_enuSetPinValue+0x17e>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_enuSetPinValue+0x17a>
     782:	80 95       	com	r24
     784:	84 23       	and	r24, r20
     786:	8c 93       	st	X, r24
     788:	16 c0       	rjmp	.+44     	; 0x7b6 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRD , (u8PinNumCpy%8));
     78a:	a2 e3       	ldi	r26, 0x32	; 50
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e2 e3       	ldi	r30, 0x32	; 50
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	48 2f       	mov	r20, r24
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9c 01       	movw	r18, r24
     79e:	27 70       	andi	r18, 0x07	; 7
     7a0:	30 70       	andi	r19, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	02 2e       	mov	r0, r18
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_enuSetPinValue+0x1ae>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	0a 94       	dec	r0
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_enuSetPinValue+0x1aa>
     7b2:	84 2b       	or	r24, r20
     7b4:	8c 93       	st	X, r24
			}
		}

		enuErrorStatusLoc = E_OK;
     7b6:	19 82       	std	Y+1, r1	; 0x01


	}
	return enuErrorStatusLoc ;
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	08 95       	ret

000007c6 <DIO_enuToglPinValue>:

tenuErrorStatus DIO_enuToglPinValue (uint8 u8PinNumCpy )
{
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <DIO_enuToglPinValue+0x6>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 )
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	80 32       	cpi	r24, 0x20	; 32
     7d6:	18 f0       	brcs	.+6      	; 0x7de <DIO_enuToglPinValue+0x18>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	62 c0       	rjmp	.+196    	; 0x8a2 <__stack+0x43>
	}
	else
	{
		if(u8PinNumCpy <= 7)
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	88 30       	cpi	r24, 0x08	; 8
     7e2:	a0 f4       	brcc	.+40     	; 0x80c <DIO_enuToglPinValue+0x46>
		{
			/*ODRA*/
			TGL_BIT(ODRA , u8PinNumCpy);
     7e4:	ab e3       	ldi	r26, 0x3B	; 59
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	eb e3       	ldi	r30, 0x3B	; 59
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	48 2f       	mov	r20, r24
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 2e       	mov	r0, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_enuToglPinValue+0x3c>
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_enuToglPinValue+0x38>
     806:	84 27       	eor	r24, r20
     808:	8c 93       	st	X, r24
     80a:	4a c0       	rjmp	.+148    	; 0x8a0 <__stack+0x41>
		}
		else if(u8PinNumCpy <= 15)
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	80 31       	cpi	r24, 0x10	; 16
     810:	b8 f4       	brcc	.+46     	; 0x840 <DIO_enuToglPinValue+0x7a>
		{
			/*ODRB*/
			TGL_BIT(ODRB , u8PinNumCpy%8);
     812:	a8 e3       	ldi	r26, 0x38	; 56
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	e8 e3       	ldi	r30, 0x38	; 56
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	48 2f       	mov	r20, r24
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	88 2f       	mov	r24, r24
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	9c 01       	movw	r18, r24
     826:	27 70       	andi	r18, 0x07	; 7
     828:	30 70       	andi	r19, 0x00	; 0
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	02 2e       	mov	r0, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_enuToglPinValue+0x70>
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	0a 94       	dec	r0
     838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_enuToglPinValue+0x6c>
     83a:	84 27       	eor	r24, r20
     83c:	8c 93       	st	X, r24
     83e:	30 c0       	rjmp	.+96     	; 0x8a0 <__stack+0x41>
		}
		else if(u8PinNumCpy <= 23)
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 31       	cpi	r24, 0x18	; 24
     844:	b8 f4       	brcc	.+46     	; 0x874 <__stack+0x15>
		{
			/*ODRC*/
			TGL_BIT(ODRC , u8PinNumCpy%8);
     846:	a5 e3       	ldi	r26, 0x35	; 53
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	e5 e3       	ldi	r30, 0x35	; 53
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	48 2f       	mov	r20, r24
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	9c 01       	movw	r18, r24
     85a:	27 70       	andi	r18, 0x07	; 7
     85c:	30 70       	andi	r19, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 2e       	mov	r0, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	0a 94       	dec	r0
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	84 27       	eor	r24, r20
     870:	8c 93       	st	X, r24
     872:	16 c0       	rjmp	.+44     	; 0x8a0 <__stack+0x41>
		}
		else
		{
			/*ODRD*/
			TGL_BIT(ODRD , u8PinNumCpy%8);
     874:	a2 e3       	ldi	r26, 0x32	; 50
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e2 e3       	ldi	r30, 0x32	; 50
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9c 01       	movw	r18, r24
     888:	27 70       	andi	r18, 0x07	; 7
     88a:	30 70       	andi	r19, 0x00	; 0
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	02 2e       	mov	r0, r18
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	0a 94       	dec	r0
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	84 27       	eor	r24, r20
     89e:	8c 93       	st	X, r24
		}

		enuErrorStatusLoc = E_OK;
     8a0:	19 82       	std	Y+1, r1	; 0x01


	}
	return enuErrorStatusLoc ;
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	08 95       	ret

000008ae <DIO_enuReadPinValue>:

tenuErrorStatus DIO_enuReadPinValue(uint8 u8PinNumCpy ,uint8* pu8PinValueCpy)
{
     8ae:	df 93       	push	r29
     8b0:	cf 93       	push	r28
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <DIO_enuReadPinValue+0x6>
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <DIO_enuReadPinValue+0x8>
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	8a 83       	std	Y+2, r24	; 0x02
     8bc:	7c 83       	std	Y+4, r23	; 0x04
     8be:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc  ;
	if(u8PinNumCpy > 31)
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	80 32       	cpi	r24, 0x20	; 32
     8c4:	18 f0       	brcs	.+6      	; 0x8cc <DIO_enuReadPinValue+0x1e>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;	
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	66 c0       	rjmp	.+204    	; 0x998 <DIO_enuReadPinValue+0xea>
	}
	else if (pu8PinValueCpy == NULL)
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	19 f4       	brne	.+6      	; 0x8da <DIO_enuReadPinValue+0x2c>
	{
		enuErrorStatusLoc = IS_NULL_POINTER; 
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	5f c0       	rjmp	.+190    	; 0x998 <DIO_enuReadPinValue+0xea>
	}
	else
	{
		if(u8PinNumCpy <= 7)
     8da:	8a 81       	ldd	r24, Y+2	; 0x02
     8dc:	88 30       	cpi	r24, 0x08	; 8
     8de:	a0 f4       	brcc	.+40     	; 0x908 <DIO_enuReadPinValue+0x5a>
		{
			/*IDRA*/
			*pu8PinValueCpy = GET_BIT(IDRA ,u8PinNumCpy );
     8e0:	e9 e3       	ldi	r30, 0x39	; 57
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	28 2f       	mov	r18, r24
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a9 01       	movw	r20, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_enuReadPinValue+0x4a>
     8f4:	55 95       	asr	r21
     8f6:	47 95       	ror	r20
     8f8:	8a 95       	dec	r24
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_enuReadPinValue+0x46>
     8fc:	ca 01       	movw	r24, r20
     8fe:	81 70       	andi	r24, 0x01	; 1
     900:	eb 81       	ldd	r30, Y+3	; 0x03
     902:	fc 81       	ldd	r31, Y+4	; 0x04
     904:	80 83       	st	Z, r24
     906:	47 c0       	rjmp	.+142    	; 0x996 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 15)
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	80 31       	cpi	r24, 0x10	; 16
     90c:	b0 f4       	brcc	.+44     	; 0x93a <DIO_enuReadPinValue+0x8c>
		{
			/*IDRB*/

			*pu8PinValueCpy = GET_BIT(IDRB ,(u8PinNumCpy%8) );
     90e:	e6 e3       	ldi	r30, 0x36	; 54
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	87 70       	andi	r24, 0x07	; 7
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a9 01       	movw	r20, r18
     924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_enuReadPinValue+0x7c>
     926:	55 95       	asr	r21
     928:	47 95       	ror	r20
     92a:	8a 95       	dec	r24
     92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_enuReadPinValue+0x78>
     92e:	ca 01       	movw	r24, r20
     930:	81 70       	andi	r24, 0x01	; 1
     932:	eb 81       	ldd	r30, Y+3	; 0x03
     934:	fc 81       	ldd	r31, Y+4	; 0x04
     936:	80 83       	st	Z, r24
     938:	2e c0       	rjmp	.+92     	; 0x996 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 23)
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	88 31       	cpi	r24, 0x18	; 24
     93e:	b0 f4       	brcc	.+44     	; 0x96c <DIO_enuReadPinValue+0xbe>
		{
			/*IDRC*/

			*pu8PinValueCpy = GET_BIT(IDRC ,(u8PinNumCpy%8) );
     940:	e3 e3       	ldi	r30, 0x33	; 51
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	87 70       	andi	r24, 0x07	; 7
     952:	90 70       	andi	r25, 0x00	; 0
     954:	a9 01       	movw	r20, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_enuReadPinValue+0xae>
     958:	55 95       	asr	r21
     95a:	47 95       	ror	r20
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_enuReadPinValue+0xaa>
     960:	ca 01       	movw	r24, r20
     962:	81 70       	andi	r24, 0x01	; 1
     964:	eb 81       	ldd	r30, Y+3	; 0x03
     966:	fc 81       	ldd	r31, Y+4	; 0x04
     968:	80 83       	st	Z, r24
     96a:	15 c0       	rjmp	.+42     	; 0x996 <DIO_enuReadPinValue+0xe8>
		}
		else 
		{
			/*IDRD*/

			*pu8PinValueCpy = GET_BIT(IDRD ,(u8PinNumCpy%8) );
     96c:	e0 e3       	ldi	r30, 0x30	; 48
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	87 70       	andi	r24, 0x07	; 7
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a9 01       	movw	r20, r18
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_enuReadPinValue+0xda>
     984:	55 95       	asr	r21
     986:	47 95       	ror	r20
     988:	8a 95       	dec	r24
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_enuReadPinValue+0xd6>
     98c:	ca 01       	movw	r24, r20
     98e:	81 70       	andi	r24, 0x01	; 1
     990:	eb 81       	ldd	r30, Y+3	; 0x03
     992:	fc 81       	ldd	r31, Y+4	; 0x04
     994:	80 83       	st	Z, r24
		}
		enuErrorStatusLoc = E_OK ;
     996:	19 82       	std	Y+1, r1	; 0x01
	}

	return enuErrorStatusLoc ;
     998:	89 81       	ldd	r24, Y+1	; 0x01
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	08 95       	ret

000009a8 <DIO_enuSetPinPullUp>:
tenuErrorStatus DIO_enuSetPinPullUp(uint8 u8PinNumCpy ,uint8  u8PullupStatusCpy)
{
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <DIO_enuSetPinPullUp+0x6>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuSetPinValue(u8PinNumCpy ,u8PullupStatusCpy);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	6a 81       	ldd	r22, Y+2	; 0x02
     9ba:	0e 94 00 03 	call	0x600	; 0x600 <DIO_enuSetPinValue>
}
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	08 95       	ret

000009c8 <EXT0_vidInit>:
#include "EXT0_priv.h"


volatile pf EXT0_pfCallBack ;
void EXT0_vidInit(void)
{
     9c8:	df 93       	push	r29
     9ca:	cf 93       	push	r28
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	MCUCR &=0b11111100;
     9d0:	a5 e5       	ldi	r26, 0x55	; 85
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e5 e5       	ldi	r30, 0x55	; 85
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8c 7f       	andi	r24, 0xFC	; 252
     9dc:	8c 93       	st	X, r24
	MCUCR |= (EXT0_SENSE_MODE&0x03);
     9de:	a5 e5       	ldi	r26, 0x55	; 85
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 e5       	ldi	r30, 0x55	; 85
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	8c 93       	st	X, r24
	CLR_BIT(GICR , 6);
     9ec:	ab e5       	ldi	r26, 0x5B	; 91
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	eb e5       	ldi	r30, 0x5B	; 91
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 7b       	andi	r24, 0xBF	; 191
     9f8:	8c 93       	st	X, r24
	SET_BIT(GIFR , 6);
     9fa:	aa e5       	ldi	r26, 0x5A	; 90
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	ea e5       	ldi	r30, 0x5A	; 90
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	80 64       	ori	r24, 0x40	; 64
     a06:	8c 93       	st	X, r24
}
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	08 95       	ret

00000a0e <EXT0_vidEnable>:

void EXT0_vidEnable(void)
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR , 6);
     a16:	ab e5       	ldi	r26, 0x5B	; 91
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	eb e5       	ldi	r30, 0x5B	; 91
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	80 64       	ori	r24, 0x40	; 64
     a22:	8c 93       	st	X, r24
}
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <EXT0_vidDisable>:
void EXT0_vidDisable(void)
{
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR , 6);
     a32:	ab e5       	ldi	r26, 0x5B	; 91
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	eb e5       	ldi	r30, 0x5B	; 91
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	8f 7b       	andi	r24, 0xBF	; 191
     a3e:	8c 93       	st	X, r24
	
}
     a40:	cf 91       	pop	r28
     a42:	df 91       	pop	r29
     a44:	08 95       	ret

00000a46 <EXT0_vidChgMod>:

void EXT0_vidChgMod(uint8 u8ModeCpy)
{
     a46:	df 93       	push	r29
     a48:	cf 93       	push	r28
     a4a:	0f 92       	push	r0
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	89 83       	std	Y+1, r24	; 0x01
	MCUCR &=0b11111100;
     a52:	a5 e5       	ldi	r26, 0x55	; 85
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	e5 e5       	ldi	r30, 0x55	; 85
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	8c 7f       	andi	r24, 0xFC	; 252
     a5e:	8c 93       	st	X, r24
	MCUCR |= (u8ModeCpy&0x03);
     a60:	a5 e5       	ldi	r26, 0x55	; 85
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e5 e5       	ldi	r30, 0x55	; 85
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	98 2f       	mov	r25, r24
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	83 70       	andi	r24, 0x03	; 3
     a70:	89 2b       	or	r24, r25
     a72:	8c 93       	st	X, r24
}
     a74:	0f 90       	pop	r0
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <EXT0_vidSetCallBack>:


void EXT0_vidSetCallBack(pf pfCpy)
{
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	00 d0       	rcall	.+0      	; 0xa82 <EXT0_vidSetCallBack+0x6>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
	
	EXT0_pfCallBack = pfCpy ;
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	90 93 60 01 	sts	0x0160, r25
     a92:	80 93 5f 01 	sts	0x015F, r24
}
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	cf 91       	pop	r28
     a9c:	df 91       	pop	r29
     a9e:	08 95       	ret

00000aa0 <__vector_1>:


void __vector_1(void) __attribute__((signal , used));
void __vector_1(void)
{
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	EXT0_pfCallBack();
     aca:	e0 91 5f 01 	lds	r30, 0x015F
     ace:	f0 91 60 01 	lds	r31, 0x0160
     ad2:	09 95       	icall
}
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <EXT1_vidInit>:
#include "EXT1_priv.h"


volatile pf EXT1_pfCallBack ;
void EXT1_vidInit(void)
{
     afa:	df 93       	push	r29
     afc:	cf 93       	push	r28
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
	MCUCR &=0b11110011;
     b02:	a5 e5       	ldi	r26, 0x55	; 85
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e5 e5       	ldi	r30, 0x55	; 85
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	83 7f       	andi	r24, 0xF3	; 243
     b0e:	8c 93       	st	X, r24
	MCUCR |= (EXT1_SENSE_MODE&0x0C);
     b10:	a5 e5       	ldi	r26, 0x55	; 85
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	e5 e5       	ldi	r30, 0x55	; 85
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	8c 93       	st	X, r24
	CLR_BIT(GICR , 7);
     b1c:	ab e5       	ldi	r26, 0x5B	; 91
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	eb e5       	ldi	r30, 0x5B	; 91
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	8c 93       	st	X, r24
	SET_BIT(GIFR , 7);
     b2a:	aa e5       	ldi	r26, 0x5A	; 90
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	ea e5       	ldi	r30, 0x5A	; 90
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	8c 93       	st	X, r24
}
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <EXT1_vidEnable>:

void EXT1_vidEnable(void)
{
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR , 7);
     b46:	ab e5       	ldi	r26, 0x5B	; 91
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	eb e5       	ldi	r30, 0x5B	; 91
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	8c 93       	st	X, r24
}
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <EXT1_vidDisable>:
void EXT1_vidDisable(void)
{
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR , 7);
     b62:	ab e5       	ldi	r26, 0x5B	; 91
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	eb e5       	ldi	r30, 0x5B	; 91
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 77       	andi	r24, 0x7F	; 127
     b6e:	8c 93       	st	X, r24
	
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <EXT1_vidChgMod>:

void EXT1_vidChgMod(uint8 u8ModeCpy)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	89 83       	std	Y+1, r24	; 0x01
	MCUCR &=0b11110011;
     b82:	a5 e5       	ldi	r26, 0x55	; 85
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e5 e5       	ldi	r30, 0x55	; 85
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	83 7f       	andi	r24, 0xF3	; 243
     b8e:	8c 93       	st	X, r24
	MCUCR |= (u8ModeCpy&0x0C);
     b90:	a5 e5       	ldi	r26, 0x55	; 85
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e5 e5       	ldi	r30, 0x55	; 85
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	98 2f       	mov	r25, r24
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8c 70       	andi	r24, 0x0C	; 12
     ba0:	89 2b       	or	r24, r25
     ba2:	8c 93       	st	X, r24
}
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <EXT1_vidSetCallBack>:


void EXT1_vidSetCallBack(pf pfCpy)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <EXT1_vidSetCallBack+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
	
	EXT1_pfCallBack = pfCpy ;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	90 93 62 01 	sts	0x0162, r25
     bc2:	80 93 61 01 	sts	0x0161, r24
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <__vector_2>:


void __vector_2(void) __attribute__((signal , used));
void __vector_2(void)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	EXT1_pfCallBack();
     bfa:	e0 91 61 01 	lds	r30, 0x0161
     bfe:	f0 91 62 01 	lds	r31, 0x0162
     c02:	09 95       	icall
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <GIE_VIDEnable>:
#include  "GIE.h"

#define SREG *((volatile uint8 *) 0x5F)

void GIE_VIDEnable(void)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
     c32:	af e5       	ldi	r26, 0x5F	; 95
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ef e5       	ldi	r30, 0x5F	; 95
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	8c 93       	st	X, r24
}
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <GIE_VIDDisable>:

void GIE_VIDDisable(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , 7);
     c4e:	af e5       	ldi	r26, 0x5F	; 95
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ef e5       	ldi	r30, 0x5F	; 95
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8f 77       	andi	r24, 0x7F	; 127
     c5a:	8c 93       	st	X, r24
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <charToDecimal>:

};


uint16 charToDecimal(uint16 u16charTodec)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <charToDecimal+0x6>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
	u16charTodec-=48;
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	c0 97       	sbiw	r24, 0x30	; 48
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
   return u16charTodec;
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <USART_vidInit>:
pf USART_pfTxFunc ;
pf USART_pfUDRFunc ;


void USART_vidInit(void)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	0f 92       	push	r0
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	uint8 u8UCSRCLoc =0b10000000;
     c92:	80 e8       	ldi	r24, 0x80	; 128
     c94:	89 83       	std	Y+1, r24	; 0x01
	u8UCSRCLoc |= USART_MODE << 6 ;
	u8UCSRCLoc |= USART_PARITY_MODE << 4 ;
	u8UCSRCLoc |= USART_STOP_BIT_SELECT << 3 ;
	u8UCSRCLoc |= (USART_DATA_SIZE & 0b00000011) << 1;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	86 60       	ori	r24, 0x06	; 6
     c9a:	89 83       	std	Y+1, r24	; 0x01
	u8UCSRCLoc |= USART_CLOCK_POLARITY;

	UCSRC = u8UCSRCLoc ;
     c9c:	e0 e4       	ldi	r30, 0x40	; 64
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	80 83       	st	Z, r24
	UCSRB |= (0b00011000 | (USART_DATA_SIZE & 0b00000100));
     ca4:	aa e2       	ldi	r26, 0x2A	; 42
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e2       	ldi	r30, 0x2A	; 42
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 61       	ori	r24, 0x18	; 24
     cb0:	8c 93       	st	X, r24
	UCSRA |= (USART_TRANSMISSION_SPEED << 1);
     cb2:	ab e2       	ldi	r26, 0x2B	; 43
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	eb e2       	ldi	r30, 0x2B	; 43
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8c 93       	st	X, r24
	UCSRA |=  USART_MULTI_PROCESSOR_COMMUNICATION_MODE;
     cbe:	ab e2       	ldi	r26, 0x2B	; 43
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	eb e2       	ldi	r30, 0x2B	; 43
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8c 93       	st	X, r24

	CLR_BIT(UBRRH,7);
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	8c 93       	st	X, r24
	UBRRL = USART_MY_BAUD_RATE;                //16 BIT
     cd8:	e9 e2       	ldi	r30, 0x29	; 41
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	83 e3       	ldi	r24, 0x33	; 51
     cde:	80 83       	st	Z, r24
	UBRRH = ((USART_MY_BAUD_RATE) >> 8);
     ce0:	e0 e4       	ldi	r30, 0x40	; 64
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	10 82       	st	Z, r1

}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <USART_vidEnable>:

void USART_vidEnable(void)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
     cf6:	aa e2       	ldi	r26, 0x2A	; 42
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e2       	ldi	r30, 0x2A	; 42
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 60       	ori	r24, 0x08	; 8
     d02:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     d04:	aa e2       	ldi	r26, 0x2A	; 42
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ea e2       	ldi	r30, 0x2A	; 42
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	8c 93       	st	X, r24
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <USART_vidDisable>:
void USART_vidDisable(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	87 7f       	andi	r24, 0xF7	; 247
     d2c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,4);
     d2e:	aa e2       	ldi	r26, 0x2A	; 42
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e2       	ldi	r30, 0x2A	; 42
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 7e       	andi	r24, 0xEF	; 239
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <USART_vidEnable_Receiver>:

void USART_vidEnable_Receiver(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,4);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 61       	ori	r24, 0x10	; 16
     d56:	8c 93       	st	X, r24
}
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <USART_vidDisable_Receiver>:

void USART_vidDisable_Receiver(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
     d66:	aa e2       	ldi	r26, 0x2A	; 42
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e2       	ldi	r30, 0x2A	; 42
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	8c 93       	st	X, r24
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <USART_vidEnable_Transmitter>:
void USART_vidEnable_Transmitter(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
     d82:	aa e2       	ldi	r26, 0x2A	; 42
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e2       	ldi	r30, 0x2A	; 42
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	8c 93       	st	X, r24
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <USART_vidDisable_Transmitter>:
void USART_vidDisable_Transmitter(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
     d9e:	aa e2       	ldi	r26, 0x2A	; 42
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e2       	ldi	r30, 0x2A	; 42
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	87 7f       	andi	r24, 0xF7	; 247
     daa:	8c 93       	st	X, r24
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <USART_vidEnable_RX_Int>:

void USART_vidEnable_RX_Int(void)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
     dba:	aa e2       	ldi	r26, 0x2A	; 42
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ea e2       	ldi	r30, 0x2A	; 42
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 68       	ori	r24, 0x80	; 128
     dc6:	8c 93       	st	X, r24
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <USART_vidDisable_RX_Int>:
void USART_vidDisable_RX_Int(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,7);
     dd6:	aa e2       	ldi	r26, 0x2A	; 42
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e2       	ldi	r30, 0x2A	; 42
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 77       	andi	r24, 0x7F	; 127
     de2:	8c 93       	st	X, r24
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <USART_vidEnable_TX_Int>:

void USART_vidEnable_TX_Int(void)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);
     df2:	aa e2       	ldi	r26, 0x2A	; 42
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ea e2       	ldi	r30, 0x2A	; 42
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 64       	ori	r24, 0x40	; 64
     dfe:	8c 93       	st	X, r24
}
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <USART_vidDisable_TX_Int>:
void USART_vidDisable_TX_Int(void)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,6);
     e0e:	aa e2       	ldi	r26, 0x2A	; 42
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e2       	ldi	r30, 0x2A	; 42
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7b       	andi	r24, 0xBF	; 191
     e1a:	8c 93       	st	X, r24
}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <USART_vidEnable_UDR_Int>:

void USART_vidEnable_UDR_Int(void)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
     e2a:	aa e2       	ldi	r26, 0x2A	; 42
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ea e2       	ldi	r30, 0x2A	; 42
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	8c 93       	st	X, r24
}
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <USART_vidDisable_UDR_Int>:
void USART_vidDisable_UDR_Int(void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,5);
     e46:	aa e2       	ldi	r26, 0x2A	; 42
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 7d       	andi	r24, 0xDF	; 223
     e52:	8c 93       	st	X, r24
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <USART_vidSetCallBack_Rx>:

void USART_vidSetCallBack_Rx(pf pfCallFuncRxCpy)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <USART_vidSetCallBack_Rx+0x6>
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
	USART_pfRxFunc = pfCallFuncRxCpy ;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	90 93 68 01 	sts	0x0168, r25
     e70:	80 93 67 01 	sts	0x0167, r24
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <USART_vidSetCallBack_Tx>:

void USART_vidSetCallBack_Tx(pf pfCallFuncTxCpy)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <USART_vidSetCallBack_Tx+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
	USART_pfTxFunc = pfCallFuncTxCpy ;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	90 93 66 01 	sts	0x0166, r25
     e94:	80 93 65 01 	sts	0x0165, r24
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <USART_vidSetCallBack_UDR>:

void USART_vidSetCallBack_UDR(pf pfCallFuncUDRCpy)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <USART_vidSetCallBack_UDR+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	USART_pfUDRFunc = pfCallFuncUDRCpy ;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	90 93 64 01 	sts	0x0164, r25
     eb8:	80 93 63 01 	sts	0x0163, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <USART_Transmit>:

void USART_Transmit(uint8 data) 
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	// Wait for empty transmit buffer
	while (!(UCSRA & (1 << 5)));
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 72       	andi	r24, 0x20	; 32
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f3       	breq	.-18     	; 0xed2 <USART_Transmit+0xc>

	// Put data into buffer and send
	UDR = data;
     ee4:	ec e2       	ldi	r30, 0x2C	; 44
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 83       	st	Z, r24
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <USART_TransmitString>:

void USART_TransmitString(uint8* data)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <USART_TransmitString+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <USART_TransmitString+0x24>
	// Wait for empty transmit buffer
	while (*data != '\0')		/* Send string till null */
	{
		USART_Transmit(*data);
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	80 81       	ld	r24, Z
     f0a:	0e 94 63 07 	call	0xec6	; 0xec6 <USART_Transmit>
		data++;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TransmitString(uint8* data)
{
	// Wait for empty transmit buffer
	while (*data != '\0')		/* Send string till null */
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	89 f7       	brne	.-30     	; 0xf04 <USART_TransmitString+0x10>
	{
		USART_Transmit(*data);
		data++;
	}
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <USART_Receive>:

uint8 USART_Receive(void) 
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	// Wait for data to be received
	while (!(UCSRA & (1 << 7)));
     f34:	eb e2       	ldi	r30, 0x2B	; 43
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	dc f7       	brge	.-10     	; 0xf34 <USART_Receive+0x8>

	// Return received data
	return UDR;
     f3e:	ec e2       	ldi	r30, 0x2C	; 44
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <__vector_13>:


void __vector_13 (void) __attribute__((signal,used));
void __vector_13 (void)
{
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	USART_pfRxFunc();
     f74:	e0 91 67 01 	lds	r30, 0x0167
     f78:	f0 91 68 01 	lds	r31, 0x0168
     f7c:	09 95       	icall
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__vector_14>:

void __vector_14 (void) __attribute__((signal,used));
void __vector_14 (void)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	USART_pfUDRFunc();
     fce:	e0 91 63 01 	lds	r30, 0x0163
     fd2:	f0 91 64 01 	lds	r31, 0x0164
     fd6:	09 95       	icall
}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_15>:

void __vector_15 (void) __attribute__((signal,used));
void __vector_15 (void)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	USART_pfTxFunc();
    1028:	e0 91 65 01 	lds	r30, 0x0165
    102c:	f0 91 66 01 	lds	r31, 0x0166
    1030:	09 95       	icall
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <_exit>:
    1058:	f8 94       	cli

0000105a <__stop_program>:
    105a:	ff cf       	rjmp	.-2      	; 0x105a <__stop_program>
