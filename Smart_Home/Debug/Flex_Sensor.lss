
Flex_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000afa  2**0
                  ALLOC
  2 .debug_aranges 00000160  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000360  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000641  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000221  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a0d  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000240  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000431  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00004be6  00000000  00000000  0000289d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000140  00000000  00000000  00007483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_13>
  38:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_14>
  3c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Recive>:

#include "DIO.h"
#include "USART.h"

void Recive(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	uint8 DATA=0;
  86:	19 82       	std	Y+1, r1	; 0x01
	DATA = USART_Receive();
  88:	0e 94 ab 04 	call	0x956	; 0x956 <USART_Receive>
  8c:	89 83       	std	Y+1, r24	; 0x01
	if(DATA==1)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	29 f4       	brne	.+10     	; 0x9e <Recive+0x22>
	{
		DIO_enuSetPinValue(0,1);
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_enuSetPinValue>
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <Recive+0x2a>
	}
	else
	{
		DIO_enuSetPinValue(0,0);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_enuSetPinValue>
	}
}
  a6:	0f 90       	pop	r0
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <main>:

//uint8 Value_1,Value_2,Value_3,Value_4,Value_5;

int main(void)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
  b6:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vidInit>
	USART_vidInit();
  ba:	0e 94 59 03 	call	0x6b2	; 0x6b2 <USART_vidInit>
	USART_vidSetCallBack_Rx(Recive);
  be:	8e e3       	ldi	r24, 0x3E	; 62
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 42 04 	call	0x884	; 0x884 <USART_vidSetCallBack_Rx>
	USART_vidEnable_RX_Int();
  c6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_vidEnable_RX_Int>
	GIE_VIDEnable();
  ca:	0e 94 3d 03 	call	0x67a	; 0x67a <GIE_VIDEnable>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x20>

000000d0 <DIO_vidInit>:
#include "DIO.h"
#include "DIO_cfg.h"
#include "DIO_priv.h"

void DIO_vidInit(void)
{
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	DDRA = CONC(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
  d8:	ea e3       	ldi	r30, 0x3A	; 58
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	83 e6       	ldi	r24, 0x63	; 99
  de:	80 83       	st	Z, r24
	DDRB = CONC(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
  e0:	e7 e3       	ldi	r30, 0x37	; 55
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	80 83       	st	Z, r24
	DDRC = CONC(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16 );
  e8:	e4 e3       	ldi	r30, 0x34	; 52
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 ef       	ldi	r24, 0xF0	; 240
  ee:	80 83       	st	Z, r24
	DDRD = CONC(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24 );
  f0:	e1 e3       	ldi	r30, 0x31	; 49
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	82 eb       	ldi	r24, 0xB2	; 178
  f6:	80 83       	st	Z, r24


}
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <DIO_enuSetPinDir>:

tenuErrorStatus DIO_enuSetPinDir   (uint8 u8PinNumCpy ,uint8  u8PinDirCpy)
{
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <DIO_enuSetPinDir+0x6>
 104:	0f 92       	push	r0
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	8a 83       	std	Y+2, r24	; 0x02
 10c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc;
	if(u8PinNumCpy > 31 || u8PinDirCpy > 1)
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	18 f4       	brcc	.+6      	; 0x11a <DIO_enuSetPinDir+0x1c>
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	18 f0       	brcs	.+6      	; 0x120 <DIO_enuSetPinDir+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	89 83       	std	Y+1, r24	; 0x01
 11e:	c2 c0       	rjmp	.+388    	; 0x2a4 <DIO_enuSetPinDir+0x1a6>
	}
	else
	{
		if(u8PinNumCpy <=7)
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	60 f5       	brcc	.+88     	; 0x17e <DIO_enuSetPinDir+0x80>
		{
			/*DDRA*/
			if (u8PinDirCpy == 0)
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	88 23       	and	r24, r24
 12a:	a9 f4       	brne	.+42     	; 0x156 <DIO_enuSetPinDir+0x58>
			{
				// clear pin 
				CLR_BIT(DDRA,u8PinNumCpy);
 12c:	aa e3       	ldi	r26, 0x3A	; 58
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_enuSetPinDir+0x4c>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_enuSetPinDir+0x48>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	a6 c0       	rjmp	.+332    	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRA,u8PinNumCpy);
 156:	aa e3       	ldi	r26, 0x3A	; 58
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ea e3       	ldi	r30, 0x3A	; 58
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_enuSetPinDir+0x76>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_enuSetPinDir+0x72>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	92 c0       	rjmp	.+292    	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=15)
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	80 31       	cpi	r24, 0x10	; 16
 182:	78 f5       	brcc	.+94     	; 0x1e2 <DIO_enuSetPinDir+0xe4>
		{
			/*DDRB*/
			u8PinNumCpy =u8PinNumCpy%8;
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	87 70       	andi	r24, 0x07	; 7
 188:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	88 23       	and	r24, r24
 18e:	a9 f4       	brne	.+42     	; 0x1ba <DIO_enuSetPinDir+0xbc>
			{
				// clear pin 
				CLR_BIT(DDRB,u8PinNumCpy);
 190:	a7 e3       	ldi	r26, 0x37	; 55
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e7 e3       	ldi	r30, 0x37	; 55
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_enuSetPinDir+0xb0>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_enuSetPinDir+0xac>
 1b2:	80 95       	com	r24
 1b4:	84 23       	and	r24, r20
 1b6:	8c 93       	st	X, r24
 1b8:	74 c0       	rjmp	.+232    	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRB,u8PinNumCpy);
 1ba:	a7 e3       	ldi	r26, 0x37	; 55
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e7 e3       	ldi	r30, 0x37	; 55
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	48 2f       	mov	r20, r24
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 2e       	mov	r0, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_enuSetPinDir+0xda>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_enuSetPinDir+0xd6>
 1dc:	84 2b       	or	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	60 c0       	rjmp	.+192    	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=23)
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	88 31       	cpi	r24, 0x18	; 24
 1e6:	78 f5       	brcc	.+94     	; 0x246 <DIO_enuSetPinDir+0x148>
		{
			/*DDRC*/
			u8PinNumCpy =u8PinNumCpy%8;
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	87 70       	andi	r24, 0x07	; 7
 1ec:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	88 23       	and	r24, r24
 1f2:	a9 f4       	brne	.+42     	; 0x21e <DIO_enuSetPinDir+0x120>
			{
				// clear pin 
				CLR_BIT(DDRC,u8PinNumCpy);
 1f4:	a4 e3       	ldi	r26, 0x34	; 52
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e4 e3       	ldi	r30, 0x34	; 52
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_enuSetPinDir+0x114>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_enuSetPinDir+0x110>
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	8c 93       	st	X, r24
 21c:	42 c0       	rjmp	.+132    	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRC,u8PinNumCpy);
 21e:	a4 e3       	ldi	r26, 0x34	; 52
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_enuSetPinDir+0x13e>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_enuSetPinDir+0x13a>
 240:	84 2b       	or	r24, r20
 242:	8c 93       	st	X, r24
 244:	2e c0       	rjmp	.+92     	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else
		{
			/*DDRD*/
			u8PinNumCpy =u8PinNumCpy%8;
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	87 70       	andi	r24, 0x07	; 7
 24a:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	88 23       	and	r24, r24
 250:	a9 f4       	brne	.+42     	; 0x27c <DIO_enuSetPinDir+0x17e>
			{
				// clear pin 
				CLR_BIT(DDRD,u8PinNumCpy);
 252:	a1 e3       	ldi	r26, 0x31	; 49
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e1 e3       	ldi	r30, 0x31	; 49
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_enuSetPinDir+0x172>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_enuSetPinDir+0x16e>
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	8c 93       	st	X, r24
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRD,u8PinNumCpy);
 27c:	a1 e3       	ldi	r26, 0x31	; 49
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e1 e3       	ldi	r30, 0x31	; 49
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuSetPinDir+0x19c>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuSetPinDir+0x198>
 29e:	84 2b       	or	r24, r20
 2a0:	8c 93       	st	X, r24
			}
		}
		enuErrorStatusLoc = E_OK ;
 2a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuErrorStatusLoc;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <DIO_enuSetPinValue>:

tenuErrorStatus DIO_enuSetPinValue (uint8 u8PinNumCpy ,uint8  u8PinStatusCpy)
{
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <DIO_enuSetPinValue+0x6>
 2b8:	0f 92       	push	r0
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	8a 83       	std	Y+2, r24	; 0x02
 2c0:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 || u8PinStatusCpy > 1)
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	80 32       	cpi	r24, 0x20	; 32
 2c6:	18 f4       	brcc	.+6      	; 0x2ce <DIO_enuSetPinValue+0x1c>
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <DIO_enuSetPinValue+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	cb c0       	rjmp	.+406    	; 0x46a <DIO_enuSetPinValue+0x1b8>
	}
	else
	{
		if(u8PinNumCpy <= 7)
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	60 f5       	brcc	.+88     	; 0x332 <DIO_enuSetPinValue+0x80>
		{
			/*ODRA*/
			if (u8PinStatusCpy == 0)
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	88 23       	and	r24, r24
 2de:	a9 f4       	brne	.+42     	; 0x30a <DIO_enuSetPinValue+0x58>
			{
				//CLR BIT
				CLR_BIT(ODRA , u8PinNumCpy);
 2e0:	ab e3       	ldi	r26, 0x3B	; 59
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	eb e3       	ldi	r30, 0x3B	; 59
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	48 2f       	mov	r20, r24
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	28 2f       	mov	r18, r24
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 2e       	mov	r0, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_enuSetPinValue+0x4c>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_enuSetPinValue+0x48>
 302:	80 95       	com	r24
 304:	84 23       	and	r24, r20
 306:	8c 93       	st	X, r24
 308:	af c0       	rjmp	.+350    	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRA , u8PinNumCpy);
 30a:	ab e3       	ldi	r26, 0x3B	; 59
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	eb e3       	ldi	r30, 0x3B	; 59
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_enuSetPinValue+0x76>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_enuSetPinValue+0x72>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	9b c0       	rjmp	.+310    	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else if(u8PinNumCpy <= 15)
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	80 31       	cpi	r24, 0x10	; 16
 336:	90 f5       	brcc	.+100    	; 0x39c <DIO_enuSetPinValue+0xea>
		{
			/*ODRB*/
			if (u8PinStatusCpy == 0)
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	88 23       	and	r24, r24
 33c:	c1 f4       	brne	.+48     	; 0x36e <DIO_enuSetPinValue+0xbc>
			{
				//CLR BIT
				CLR_BIT(ODRB , (u8PinNumCpy%8));
 33e:	a8 e3       	ldi	r26, 0x38	; 56
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e8 e3       	ldi	r30, 0x38	; 56
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 2f       	mov	r24, r24
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	9c 01       	movw	r18, r24
 352:	27 70       	andi	r18, 0x07	; 7
 354:	30 70       	andi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_enuSetPinValue+0xb0>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_enuSetPinValue+0xac>
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	8c 93       	st	X, r24
 36c:	7d c0       	rjmp	.+250    	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRB , (u8PinNumCpy%8));
 36e:	a8 e3       	ldi	r26, 0x38	; 56
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e8 e3       	ldi	r30, 0x38	; 56
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	88 2f       	mov	r24, r24
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9c 01       	movw	r18, r24
 382:	27 70       	andi	r18, 0x07	; 7
 384:	30 70       	andi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_enuSetPinValue+0xe0>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_enuSetPinValue+0xdc>
 396:	84 2b       	or	r24, r20
 398:	8c 93       	st	X, r24
 39a:	66 c0       	rjmp	.+204    	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else if(u8PinNumCpy <= 23)
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	88 31       	cpi	r24, 0x18	; 24
 3a0:	90 f5       	brcc	.+100    	; 0x406 <DIO_enuSetPinValue+0x154>
		{
			/*ODRC*/
			if (u8PinStatusCpy == 0)
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	88 23       	and	r24, r24
 3a6:	c1 f4       	brne	.+48     	; 0x3d8 <DIO_enuSetPinValue+0x126>
			{
				//CLR BIT
				CLR_BIT(ODRC , (u8PinNumCpy%8));
 3a8:	a5 e3       	ldi	r26, 0x35	; 53
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e5 e3       	ldi	r30, 0x35	; 53
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	48 2f       	mov	r20, r24
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	9c 01       	movw	r18, r24
 3bc:	27 70       	andi	r18, 0x07	; 7
 3be:	30 70       	andi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_enuSetPinValue+0x11a>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_enuSetPinValue+0x116>
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	8c 93       	st	X, r24
 3d6:	48 c0       	rjmp	.+144    	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRC , (u8PinNumCpy%8));
 3d8:	a5 e3       	ldi	r26, 0x35	; 53
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e5 e3       	ldi	r30, 0x35	; 53
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c 01       	movw	r18, r24
 3ec:	27 70       	andi	r18, 0x07	; 7
 3ee:	30 70       	andi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_enuSetPinValue+0x14a>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_enuSetPinValue+0x146>
 400:	84 2b       	or	r24, r20
 402:	8c 93       	st	X, r24
 404:	31 c0       	rjmp	.+98     	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else
		{
			/*ODRD*/
			if (u8PinStatusCpy == 0)
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	88 23       	and	r24, r24
 40a:	c1 f4       	brne	.+48     	; 0x43c <DIO_enuSetPinValue+0x18a>
			{
				//CLR BIT
				CLR_BIT(ODRD , (u8PinNumCpy%8));
 40c:	a2 e3       	ldi	r26, 0x32	; 50
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e2 e3       	ldi	r30, 0x32	; 50
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	9c 01       	movw	r18, r24
 420:	27 70       	andi	r18, 0x07	; 7
 422:	30 70       	andi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_enuSetPinValue+0x17e>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_enuSetPinValue+0x17a>
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	8c 93       	st	X, r24
 43a:	16 c0       	rjmp	.+44     	; 0x468 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRD , (u8PinNumCpy%8));
 43c:	a2 e3       	ldi	r26, 0x32	; 50
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e2 e3       	ldi	r30, 0x32	; 50
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9c 01       	movw	r18, r24
 450:	27 70       	andi	r18, 0x07	; 7
 452:	30 70       	andi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_enuSetPinValue+0x1ae>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_enuSetPinValue+0x1aa>
 464:	84 2b       	or	r24, r20
 466:	8c 93       	st	X, r24
			}
		}

		enuErrorStatusLoc = E_OK;
 468:	19 82       	std	Y+1, r1	; 0x01


	}
	return enuErrorStatusLoc ;
 46a:	89 81       	ldd	r24, Y+1	; 0x01
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <DIO_enuToglPinValue>:

tenuErrorStatus DIO_enuToglPinValue (uint8 u8PinNumCpy )
{
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	00 d0       	rcall	.+0      	; 0x47e <DIO_enuToglPinValue+0x6>
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 )
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	80 32       	cpi	r24, 0x20	; 32
 488:	18 f0       	brcs	.+6      	; 0x490 <DIO_enuToglPinValue+0x18>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	62 c0       	rjmp	.+196    	; 0x554 <DIO_enuToglPinValue+0xdc>
	}
	else
	{
		if(u8PinNumCpy <= 7)
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	a0 f4       	brcc	.+40     	; 0x4be <DIO_enuToglPinValue+0x46>
		{
			/*ODRA*/
			TGL_BIT(ODRA , u8PinNumCpy);
 496:	ab e3       	ldi	r26, 0x3B	; 59
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	eb e3       	ldi	r30, 0x3B	; 59
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_enuToglPinValue+0x3c>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_enuToglPinValue+0x38>
 4b8:	84 27       	eor	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	4a c0       	rjmp	.+148    	; 0x552 <DIO_enuToglPinValue+0xda>
		}
		else if(u8PinNumCpy <= 15)
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	80 31       	cpi	r24, 0x10	; 16
 4c2:	b8 f4       	brcc	.+46     	; 0x4f2 <DIO_enuToglPinValue+0x7a>
		{
			/*ODRB*/
			TGL_BIT(ODRB , u8PinNumCpy%8);
 4c4:	a8 e3       	ldi	r26, 0x38	; 56
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e8 e3       	ldi	r30, 0x38	; 56
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	9c 01       	movw	r18, r24
 4d8:	27 70       	andi	r18, 0x07	; 7
 4da:	30 70       	andi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 2e       	mov	r0, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_enuToglPinValue+0x70>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_enuToglPinValue+0x6c>
 4ec:	84 27       	eor	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	30 c0       	rjmp	.+96     	; 0x552 <DIO_enuToglPinValue+0xda>
		}
		else if(u8PinNumCpy <= 23)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	88 31       	cpi	r24, 0x18	; 24
 4f6:	b8 f4       	brcc	.+46     	; 0x526 <DIO_enuToglPinValue+0xae>
		{
			/*ODRC*/
			TGL_BIT(ODRC , u8PinNumCpy%8);
 4f8:	a5 e3       	ldi	r26, 0x35	; 53
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e5 e3       	ldi	r30, 0x35	; 53
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	9c 01       	movw	r18, r24
 50c:	27 70       	andi	r18, 0x07	; 7
 50e:	30 70       	andi	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 2e       	mov	r0, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_enuToglPinValue+0xa4>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_enuToglPinValue+0xa0>
 520:	84 27       	eor	r24, r20
 522:	8c 93       	st	X, r24
 524:	16 c0       	rjmp	.+44     	; 0x552 <DIO_enuToglPinValue+0xda>
		}
		else
		{
			/*ODRD*/
			TGL_BIT(ODRD , u8PinNumCpy%8);
 526:	a2 e3       	ldi	r26, 0x32	; 50
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e2 e3       	ldi	r30, 0x32	; 50
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	88 2f       	mov	r24, r24
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	9c 01       	movw	r18, r24
 53a:	27 70       	andi	r18, 0x07	; 7
 53c:	30 70       	andi	r19, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 2e       	mov	r0, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_enuToglPinValue+0xd2>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_enuToglPinValue+0xce>
 54e:	84 27       	eor	r24, r20
 550:	8c 93       	st	X, r24
		}

		enuErrorStatusLoc = E_OK;
 552:	19 82       	std	Y+1, r1	; 0x01


	}
	return enuErrorStatusLoc ;
 554:	89 81       	ldd	r24, Y+1	; 0x01
}
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <DIO_enuReadPinValue>:

tenuErrorStatus DIO_enuReadPinValue(uint8 u8PinNumCpy ,uint8* pu8PinValueCpy)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <DIO_enuReadPinValue+0x6>
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_enuReadPinValue+0x8>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	8a 83       	std	Y+2, r24	; 0x02
 56e:	7c 83       	std	Y+4, r23	; 0x04
 570:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc  ;
	if(u8PinNumCpy > 31)
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	80 32       	cpi	r24, 0x20	; 32
 576:	18 f0       	brcs	.+6      	; 0x57e <DIO_enuReadPinValue+0x1e>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;	
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	89 83       	std	Y+1, r24	; 0x01
 57c:	66 c0       	rjmp	.+204    	; 0x64a <DIO_enuReadPinValue+0xea>
	}
	else if (pu8PinValueCpy == NULL)
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	9c 81       	ldd	r25, Y+4	; 0x04
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	19 f4       	brne	.+6      	; 0x58c <DIO_enuReadPinValue+0x2c>
	{
		enuErrorStatusLoc = IS_NULL_POINTER; 
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	5f c0       	rjmp	.+190    	; 0x64a <DIO_enuReadPinValue+0xea>
	}
	else
	{
		if(u8PinNumCpy <= 7)
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	88 30       	cpi	r24, 0x08	; 8
 590:	a0 f4       	brcc	.+40     	; 0x5ba <DIO_enuReadPinValue+0x5a>
		{
			/*IDRA*/
			*pu8PinValueCpy = GET_BIT(IDRA ,u8PinNumCpy );
 592:	e9 e3       	ldi	r30, 0x39	; 57
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	88 2f       	mov	r24, r24
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	a9 01       	movw	r20, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_enuReadPinValue+0x4a>
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_enuReadPinValue+0x46>
 5ae:	ca 01       	movw	r24, r20
 5b0:	81 70       	andi	r24, 0x01	; 1
 5b2:	eb 81       	ldd	r30, Y+3	; 0x03
 5b4:	fc 81       	ldd	r31, Y+4	; 0x04
 5b6:	80 83       	st	Z, r24
 5b8:	47 c0       	rjmp	.+142    	; 0x648 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 15)
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	80 31       	cpi	r24, 0x10	; 16
 5be:	b0 f4       	brcc	.+44     	; 0x5ec <DIO_enuReadPinValue+0x8c>
		{
			/*IDRB*/

			*pu8PinValueCpy = GET_BIT(IDRB ,(u8PinNumCpy%8) );
 5c0:	e6 e3       	ldi	r30, 0x36	; 54
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	87 70       	andi	r24, 0x07	; 7
 5d2:	90 70       	andi	r25, 0x00	; 0
 5d4:	a9 01       	movw	r20, r18
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_enuReadPinValue+0x7c>
 5d8:	55 95       	asr	r21
 5da:	47 95       	ror	r20
 5dc:	8a 95       	dec	r24
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_enuReadPinValue+0x78>
 5e0:	ca 01       	movw	r24, r20
 5e2:	81 70       	andi	r24, 0x01	; 1
 5e4:	eb 81       	ldd	r30, Y+3	; 0x03
 5e6:	fc 81       	ldd	r31, Y+4	; 0x04
 5e8:	80 83       	st	Z, r24
 5ea:	2e c0       	rjmp	.+92     	; 0x648 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 23)
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	88 31       	cpi	r24, 0x18	; 24
 5f0:	b0 f4       	brcc	.+44     	; 0x61e <DIO_enuReadPinValue+0xbe>
		{
			/*IDRC*/

			*pu8PinValueCpy = GET_BIT(IDRC ,(u8PinNumCpy%8) );
 5f2:	e3 e3       	ldi	r30, 0x33	; 51
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	87 70       	andi	r24, 0x07	; 7
 604:	90 70       	andi	r25, 0x00	; 0
 606:	a9 01       	movw	r20, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuReadPinValue+0xae>
 60a:	55 95       	asr	r21
 60c:	47 95       	ror	r20
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuReadPinValue+0xaa>
 612:	ca 01       	movw	r24, r20
 614:	81 70       	andi	r24, 0x01	; 1
 616:	eb 81       	ldd	r30, Y+3	; 0x03
 618:	fc 81       	ldd	r31, Y+4	; 0x04
 61a:	80 83       	st	Z, r24
 61c:	15 c0       	rjmp	.+42     	; 0x648 <DIO_enuReadPinValue+0xe8>
		}
		else 
		{
			/*IDRD*/

			*pu8PinValueCpy = GET_BIT(IDRD ,(u8PinNumCpy%8) );
 61e:	e0 e3       	ldi	r30, 0x30	; 48
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	87 70       	andi	r24, 0x07	; 7
 630:	90 70       	andi	r25, 0x00	; 0
 632:	a9 01       	movw	r20, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_enuReadPinValue+0xda>
 636:	55 95       	asr	r21
 638:	47 95       	ror	r20
 63a:	8a 95       	dec	r24
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_enuReadPinValue+0xd6>
 63e:	ca 01       	movw	r24, r20
 640:	81 70       	andi	r24, 0x01	; 1
 642:	eb 81       	ldd	r30, Y+3	; 0x03
 644:	fc 81       	ldd	r31, Y+4	; 0x04
 646:	80 83       	st	Z, r24
		}
		enuErrorStatusLoc = E_OK ;
 648:	19 82       	std	Y+1, r1	; 0x01
	}

	return enuErrorStatusLoc ;
 64a:	89 81       	ldd	r24, Y+1	; 0x01
}
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <DIO_enuSetPinPullUp>:
tenuErrorStatus DIO_enuSetPinPullUp(uint8 u8PinNumCpy ,uint8  u8PullupStatusCpy)
{
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_enuSetPinPullUp+0x6>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuSetPinValue(u8PinNumCpy ,u8PullupStatusCpy);
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	6a 81       	ldd	r22, Y+2	; 0x02
 66c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_enuSetPinValue>
}
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	cf 91       	pop	r28
 676:	df 91       	pop	r29
 678:	08 95       	ret

0000067a <GIE_VIDEnable>:
#include  "GIE.h"

#define SREG *((volatile uint8 *) 0x5F)

void GIE_VIDEnable(void)
{
 67a:	df 93       	push	r29
 67c:	cf 93       	push	r28
 67e:	cd b7       	in	r28, 0x3d	; 61
 680:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
 682:	af e5       	ldi	r26, 0x5F	; 95
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	ef e5       	ldi	r30, 0x5F	; 95
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	8c 93       	st	X, r24
}
 690:	cf 91       	pop	r28
 692:	df 91       	pop	r29
 694:	08 95       	ret

00000696 <GIE_VIDDisable>:

void GIE_VIDDisable(void)
{
 696:	df 93       	push	r29
 698:	cf 93       	push	r28
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , 7);
 69e:	af e5       	ldi	r26, 0x5F	; 95
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	ef e5       	ldi	r30, 0x5F	; 95
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	8f 77       	andi	r24, 0x7F	; 127
 6aa:	8c 93       	st	X, r24
}
 6ac:	cf 91       	pop	r28
 6ae:	df 91       	pop	r29
 6b0:	08 95       	ret

000006b2 <USART_vidInit>:
pf USART_pfTxFunc ;
pf USART_pfUDRFunc ;


void USART_vidInit(void)
{
 6b2:	df 93       	push	r29
 6b4:	cf 93       	push	r28
 6b6:	0f 92       	push	r0
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
	uint8 u8UCSRCLoc =0b10000000;
 6bc:	80 e8       	ldi	r24, 0x80	; 128
 6be:	89 83       	std	Y+1, r24	; 0x01
	u8UCSRCLoc |= USART_MODE << 6 ;
	u8UCSRCLoc |= USART_PARITY_MODE << 4 ;
	u8UCSRCLoc |= USART_STOP_BIT_SELECT << 3 ;
	u8UCSRCLoc |= (USART_DATA_SIZE & 0b00000011) << 1;
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	86 60       	ori	r24, 0x06	; 6
 6c4:	89 83       	std	Y+1, r24	; 0x01
	u8UCSRCLoc |= USART_CLOCK_POLARITY;

	UCSRC = u8UCSRCLoc ;
 6c6:	e0 e4       	ldi	r30, 0x40	; 64
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	80 83       	st	Z, r24
	UCSRB |= (0b00011000 | (USART_DATA_SIZE & 0b00000100));
 6ce:	aa e2       	ldi	r26, 0x2A	; 42
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ea e2       	ldi	r30, 0x2A	; 42
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	88 61       	ori	r24, 0x18	; 24
 6da:	8c 93       	st	X, r24
	UCSRA |= (USART_TRANSMISSION_SPEED << 1);
 6dc:	ab e2       	ldi	r26, 0x2B	; 43
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	eb e2       	ldi	r30, 0x2B	; 43
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	8c 93       	st	X, r24
	UCSRA |=  USART_MULTI_PROCESSOR_COMMUNICATION_MODE;
 6e8:	ab e2       	ldi	r26, 0x2B	; 43
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	eb e2       	ldi	r30, 0x2B	; 43
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8c 93       	st	X, r24

	CLR_BIT(UBRRH,7);
 6f4:	a0 e4       	ldi	r26, 0x40	; 64
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e4       	ldi	r30, 0x40	; 64
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	8f 77       	andi	r24, 0x7F	; 127
 700:	8c 93       	st	X, r24
	UBRRL = USART_MY_BAUD_RATE;                //16 BIT
 702:	e9 e2       	ldi	r30, 0x29	; 41
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	83 e3       	ldi	r24, 0x33	; 51
 708:	80 83       	st	Z, r24
	UBRRH = ((USART_MY_BAUD_RATE) >> 8);
 70a:	e0 e4       	ldi	r30, 0x40	; 64
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	10 82       	st	Z, r1

}
 710:	0f 90       	pop	r0
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <USART_vidEnable>:

void USART_vidEnable(void)
{
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
 720:	aa e2       	ldi	r26, 0x2A	; 42
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	ea e2       	ldi	r30, 0x2A	; 42
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	88 60       	ori	r24, 0x08	; 8
 72c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
 72e:	aa e2       	ldi	r26, 0x2A	; 42
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	ea e2       	ldi	r30, 0x2A	; 42
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	80 61       	ori	r24, 0x10	; 16
 73a:	8c 93       	st	X, r24
}
 73c:	cf 91       	pop	r28
 73e:	df 91       	pop	r29
 740:	08 95       	ret

00000742 <USART_vidDisable>:
void USART_vidDisable(void)
{
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
 74a:	aa e2       	ldi	r26, 0x2A	; 42
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	ea e2       	ldi	r30, 0x2A	; 42
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	87 7f       	andi	r24, 0xF7	; 247
 756:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,4);
 758:	aa e2       	ldi	r26, 0x2A	; 42
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	ea e2       	ldi	r30, 0x2A	; 42
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8f 7e       	andi	r24, 0xEF	; 239
 764:	8c 93       	st	X, r24
}
 766:	cf 91       	pop	r28
 768:	df 91       	pop	r29
 76a:	08 95       	ret

0000076c <USART_vidEnable_Receiver>:

void USART_vidEnable_Receiver(void)
{
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,4);
 774:	aa e2       	ldi	r26, 0x2A	; 42
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	ea e2       	ldi	r30, 0x2A	; 42
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	80 61       	ori	r24, 0x10	; 16
 780:	8c 93       	st	X, r24
}
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <USART_vidDisable_Receiver>:

void USART_vidDisable_Receiver(void)
{
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,4);
 790:	aa e2       	ldi	r26, 0x2A	; 42
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	ea e2       	ldi	r30, 0x2A	; 42
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	8f 7e       	andi	r24, 0xEF	; 239
 79c:	8c 93       	st	X, r24
}
 79e:	cf 91       	pop	r28
 7a0:	df 91       	pop	r29
 7a2:	08 95       	ret

000007a4 <USART_vidEnable_Transmitter>:
void USART_vidEnable_Transmitter(void)
{
 7a4:	df 93       	push	r29
 7a6:	cf 93       	push	r28
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,3);
 7ac:	aa e2       	ldi	r26, 0x2A	; 42
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
 7b0:	ea e2       	ldi	r30, 0x2A	; 42
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	88 60       	ori	r24, 0x08	; 8
 7b8:	8c 93       	st	X, r24
}
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	08 95       	ret

000007c0 <USART_vidDisable_Transmitter>:
void USART_vidDisable_Transmitter(void)
{
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,3);
 7c8:	aa e2       	ldi	r26, 0x2A	; 42
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	ea e2       	ldi	r30, 0x2A	; 42
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	87 7f       	andi	r24, 0xF7	; 247
 7d4:	8c 93       	st	X, r24
}
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <USART_vidEnable_RX_Int>:

void USART_vidEnable_RX_Int(void)
{
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
 7e4:	aa e2       	ldi	r26, 0x2A	; 42
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	ea e2       	ldi	r30, 0x2A	; 42
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	80 68       	ori	r24, 0x80	; 128
 7f0:	8c 93       	st	X, r24
}
 7f2:	cf 91       	pop	r28
 7f4:	df 91       	pop	r29
 7f6:	08 95       	ret

000007f8 <USART_vidDisable_RX_Int>:
void USART_vidDisable_RX_Int(void)
{
 7f8:	df 93       	push	r29
 7fa:	cf 93       	push	r28
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,7);
 800:	aa e2       	ldi	r26, 0x2A	; 42
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	ea e2       	ldi	r30, 0x2A	; 42
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	8f 77       	andi	r24, 0x7F	; 127
 80c:	8c 93       	st	X, r24
}
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <USART_vidEnable_TX_Int>:

void USART_vidEnable_TX_Int(void)
{
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);
 81c:	aa e2       	ldi	r26, 0x2A	; 42
 81e:	b0 e0       	ldi	r27, 0x00	; 0
 820:	ea e2       	ldi	r30, 0x2A	; 42
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	80 64       	ori	r24, 0x40	; 64
 828:	8c 93       	st	X, r24
}
 82a:	cf 91       	pop	r28
 82c:	df 91       	pop	r29
 82e:	08 95       	ret

00000830 <USART_vidDisable_TX_Int>:
void USART_vidDisable_TX_Int(void)
{
 830:	df 93       	push	r29
 832:	cf 93       	push	r28
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,6);
 838:	aa e2       	ldi	r26, 0x2A	; 42
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	ea e2       	ldi	r30, 0x2A	; 42
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	8f 7b       	andi	r24, 0xBF	; 191
 844:	8c 93       	st	X, r24
}
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	08 95       	ret

0000084c <USART_vidEnable_UDR_Int>:

void USART_vidEnable_UDR_Int(void)
{
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
 854:	aa e2       	ldi	r26, 0x2A	; 42
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	ea e2       	ldi	r30, 0x2A	; 42
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	80 62       	ori	r24, 0x20	; 32
 860:	8c 93       	st	X, r24
}
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	08 95       	ret

00000868 <USART_vidDisable_UDR_Int>:
void USART_vidDisable_UDR_Int(void)
{
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,5);
 870:	aa e2       	ldi	r26, 0x2A	; 42
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	ea e2       	ldi	r30, 0x2A	; 42
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	8f 7d       	andi	r24, 0xDF	; 223
 87c:	8c 93       	st	X, r24
}
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <USART_vidSetCallBack_Rx>:

void USART_vidSetCallBack_Rx(pf pfCallFuncRxCpy)
{
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	00 d0       	rcall	.+0      	; 0x88a <USART_vidSetCallBack_Rx+0x6>
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	9a 83       	std	Y+2, r25	; 0x02
 890:	89 83       	std	Y+1, r24	; 0x01
	USART_pfRxFunc = pfCallFuncRxCpy ;
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	9a 81       	ldd	r25, Y+2	; 0x02
 896:	90 93 65 00 	sts	0x0065, r25
 89a:	80 93 64 00 	sts	0x0064, r24
}
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	cf 91       	pop	r28
 8a4:	df 91       	pop	r29
 8a6:	08 95       	ret

000008a8 <USART_vidSetCallBack_Tx>:

void USART_vidSetCallBack_Tx(pf pfCallFuncTxCpy)
{
 8a8:	df 93       	push	r29
 8aa:	cf 93       	push	r28
 8ac:	00 d0       	rcall	.+0      	; 0x8ae <USART_vidSetCallBack_Tx+0x6>
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	9a 83       	std	Y+2, r25	; 0x02
 8b4:	89 83       	std	Y+1, r24	; 0x01
	USART_pfTxFunc = pfCallFuncTxCpy ;
 8b6:	89 81       	ldd	r24, Y+1	; 0x01
 8b8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ba:	90 93 63 00 	sts	0x0063, r25
 8be:	80 93 62 00 	sts	0x0062, r24
}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <USART_vidSetCallBack_UDR>:

void USART_vidSetCallBack_UDR(pf pfCallFuncUDRCpy)
{
 8cc:	df 93       	push	r29
 8ce:	cf 93       	push	r28
 8d0:	00 d0       	rcall	.+0      	; 0x8d2 <USART_vidSetCallBack_UDR+0x6>
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	9a 83       	std	Y+2, r25	; 0x02
 8d8:	89 83       	std	Y+1, r24	; 0x01
	USART_pfUDRFunc = pfCallFuncUDRCpy ;
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	9a 81       	ldd	r25, Y+2	; 0x02
 8de:	90 93 61 00 	sts	0x0061, r25
 8e2:	80 93 60 00 	sts	0x0060, r24
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	08 95       	ret

000008f0 <USART_Transmit>:

void USART_Transmit(uint8 data) 
{
 8f0:	df 93       	push	r29
 8f2:	cf 93       	push	r28
 8f4:	0f 92       	push	r0
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	89 83       	std	Y+1, r24	; 0x01
	// Wait for empty transmit buffer
	while (!(UCSRA & (1 << 5)));
 8fc:	eb e2       	ldi	r30, 0x2B	; 43
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	80 72       	andi	r24, 0x20	; 32
 908:	90 70       	andi	r25, 0x00	; 0
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	b9 f3       	breq	.-18     	; 0x8fc <USART_Transmit+0xc>

	// Put data into buffer and send
	UDR = data;
 90e:	ec e2       	ldi	r30, 0x2C	; 44
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	80 83       	st	Z, r24
}
 916:	0f 90       	pop	r0
 918:	cf 91       	pop	r28
 91a:	df 91       	pop	r29
 91c:	08 95       	ret

0000091e <USART_TransmitString>:

void USART_TransmitString(uint8* data)
{
 91e:	df 93       	push	r29
 920:	cf 93       	push	r28
 922:	00 d0       	rcall	.+0      	; 0x924 <USART_TransmitString+0x6>
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	89 83       	std	Y+1, r24	; 0x01
 92c:	0a c0       	rjmp	.+20     	; 0x942 <USART_TransmitString+0x24>
	// Wait for empty transmit buffer
	while (*data != '\0')		/* Send string till null */
	{
		USART_Transmit(*data);
 92e:	e9 81       	ldd	r30, Y+1	; 0x01
 930:	fa 81       	ldd	r31, Y+2	; 0x02
 932:	80 81       	ld	r24, Z
 934:	0e 94 78 04 	call	0x8f0	; 0x8f0 <USART_Transmit>
		data++;
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	9a 81       	ldd	r25, Y+2	; 0x02
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	9a 83       	std	Y+2, r25	; 0x02
 940:	89 83       	std	Y+1, r24	; 0x01
}

void USART_TransmitString(uint8* data)
{
	// Wait for empty transmit buffer
	while (*data != '\0')		/* Send string till null */
 942:	e9 81       	ldd	r30, Y+1	; 0x01
 944:	fa 81       	ldd	r31, Y+2	; 0x02
 946:	80 81       	ld	r24, Z
 948:	88 23       	and	r24, r24
 94a:	89 f7       	brne	.-30     	; 0x92e <USART_TransmitString+0x10>
	{
		USART_Transmit(*data);
		data++;
	}
}
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	cf 91       	pop	r28
 952:	df 91       	pop	r29
 954:	08 95       	ret

00000956 <USART_Receive>:

uint8 USART_Receive(void) 
{
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
	// Wait for data to be received
	while (!(UCSRA & (1 << 7)));
 95e:	eb e2       	ldi	r30, 0x2B	; 43
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	88 23       	and	r24, r24
 966:	dc f7       	brge	.-10     	; 0x95e <USART_Receive+0x8>

	// Return received data
	return UDR;
 968:	ec e2       	ldi	r30, 0x2C	; 44
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
}
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <__vector_13>:


void __vector_13 (void) __attribute__((signal,used));
void __vector_13 (void)
{
 974:	1f 92       	push	r1
 976:	0f 92       	push	r0
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	0f 92       	push	r0
 97c:	11 24       	eor	r1, r1
 97e:	2f 93       	push	r18
 980:	3f 93       	push	r19
 982:	4f 93       	push	r20
 984:	5f 93       	push	r21
 986:	6f 93       	push	r22
 988:	7f 93       	push	r23
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
 98e:	af 93       	push	r26
 990:	bf 93       	push	r27
 992:	ef 93       	push	r30
 994:	ff 93       	push	r31
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
	USART_pfRxFunc();
 99e:	e0 91 64 00 	lds	r30, 0x0064
 9a2:	f0 91 65 00 	lds	r31, 0x0065
 9a6:	09 95       	icall
}
 9a8:	cf 91       	pop	r28
 9aa:	df 91       	pop	r29
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <__vector_14>:

void __vector_14 (void) __attribute__((signal,used));
void __vector_14 (void)
{
 9ce:	1f 92       	push	r1
 9d0:	0f 92       	push	r0
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	0f 92       	push	r0
 9d6:	11 24       	eor	r1, r1
 9d8:	2f 93       	push	r18
 9da:	3f 93       	push	r19
 9dc:	4f 93       	push	r20
 9de:	5f 93       	push	r21
 9e0:	6f 93       	push	r22
 9e2:	7f 93       	push	r23
 9e4:	8f 93       	push	r24
 9e6:	9f 93       	push	r25
 9e8:	af 93       	push	r26
 9ea:	bf 93       	push	r27
 9ec:	ef 93       	push	r30
 9ee:	ff 93       	push	r31
 9f0:	df 93       	push	r29
 9f2:	cf 93       	push	r28
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62
	USART_pfUDRFunc();
 9f8:	e0 91 60 00 	lds	r30, 0x0060
 9fc:	f0 91 61 00 	lds	r31, 0x0061
 a00:	09 95       	icall
}
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	ff 91       	pop	r31
 a08:	ef 91       	pop	r30
 a0a:	bf 91       	pop	r27
 a0c:	af 91       	pop	r26
 a0e:	9f 91       	pop	r25
 a10:	8f 91       	pop	r24
 a12:	7f 91       	pop	r23
 a14:	6f 91       	pop	r22
 a16:	5f 91       	pop	r21
 a18:	4f 91       	pop	r20
 a1a:	3f 91       	pop	r19
 a1c:	2f 91       	pop	r18
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <__vector_15>:

void __vector_15 (void) __attribute__((signal,used));
void __vector_15 (void)
{
 a28:	1f 92       	push	r1
 a2a:	0f 92       	push	r0
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	0f 92       	push	r0
 a30:	11 24       	eor	r1, r1
 a32:	2f 93       	push	r18
 a34:	3f 93       	push	r19
 a36:	4f 93       	push	r20
 a38:	5f 93       	push	r21
 a3a:	6f 93       	push	r22
 a3c:	7f 93       	push	r23
 a3e:	8f 93       	push	r24
 a40:	9f 93       	push	r25
 a42:	af 93       	push	r26
 a44:	bf 93       	push	r27
 a46:	ef 93       	push	r30
 a48:	ff 93       	push	r31
 a4a:	df 93       	push	r29
 a4c:	cf 93       	push	r28
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
	USART_pfTxFunc();
 a52:	e0 91 62 00 	lds	r30, 0x0062
 a56:	f0 91 63 00 	lds	r31, 0x0063
 a5a:	09 95       	icall
}
 a5c:	cf 91       	pop	r28
 a5e:	df 91       	pop	r29
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <_exit>:
 a82:	f8 94       	cli

00000a84 <__stop_program>:
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <__stop_program>
